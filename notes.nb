(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    722741,      13688]
NotebookOptionsPosition[    700252,      13304]
NotebookOutlinePosition[    700644,      13320]
CellTagsIndexPosition[    700601,      13317]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["June 25, 2019", "Section",
 CellChangeTimes->{{3.770462240126923*^9, 
  3.770462250003153*^9}},ExpressionUUID->"218022bc-2ce2-40cf-ba04-\
cb089e002847"],

Cell[CellGroupData[{

Cell["Art of Project Development (Important Notes)", "Subsection",
 CellChangeTimes->{{3.770462296902882*^9, 
  3.770462340652372*^9}},ExpressionUUID->"cb89157a-6455-4c43-8907-\
8cef5c15c9bf"],

Cell[CellGroupData[{

Cell["Think functionally", "Subsubsection",
 CellChangeTimes->{{3.770462425657669*^9, 
  3.7704624314823923`*^9}},ExpressionUUID->"023d0f7b-b413-4380-9d57-\
d9ba08be5076"],

Cell[CellGroupData[{

Cell["Use immutable data", "Item",
 CellChangeTimes->{{3.770462342950637*^9, 3.770462349745668*^9}, {
  3.770462660873047*^9, 
  3.7704626608731623`*^9}},ExpressionUUID->"89702ad8-b4fd-4954-b256-\
41ea486ec2f5"],

Cell[CellGroupData[{

Cell["Wolfram data is by default immutable", "Subitem",
 CellChangeTimes->{{3.770462342950637*^9, 3.770462349745668*^9}, {
  3.7704626615339117`*^9, 
  3.770462679898981*^9}},ExpressionUUID->"553ba881-dc66-4ab4-808e-\
8f20fae9a28c"],

Cell["Helpful for asynchronous programming", "Subitem",
 CellChangeTimes->{{3.770462342950637*^9, 3.770462349745668*^9}, {
  3.7704626615339117`*^9, 
  3.7704626868717813`*^9}},ExpressionUUID->"8b8b4502-386a-46fa-9262-\
1d71837b45a8"]
}, Open  ]],

Cell["Don\[CloseCurlyQuote]t rely on global state", "Item",
 CellChangeTimes->{{3.770462342950637*^9, 
  3.770462357575841*^9}},ExpressionUUID->"7017273c-c6c1-4086-8ad0-\
5c581c805e4f"],

Cell["Immutable data are thread safe ", "Item",
 CellChangeTimes->{{3.770462342950637*^9, 
  3.770462376504217*^9}},ExpressionUUID->"c8126e97-380a-4e6c-9b1c-\
ba7c2c81d500"],

Cell["\<\
Use map and functional constructs instead of imperative constructs\
\>", "Item",
 CellChangeTimes->{{3.770462342950637*^9, 3.770462373133354*^9}, 
   3.770462435928265*^9, 
   3.770462867353736*^9},ExpressionUUID->"2935f48b-432b-44c1-8305-\
5ad9ee193a6f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Think, design and fail", "Subsubsection",
 CellChangeTimes->{{3.770462881868588*^9, 
  3.7704628995753736`*^9}},ExpressionUUID->"8d36cc77-3aef-42a8-993e-\
bf6f3bbffa2e"],

Cell[CellGroupData[{

Cell["Before coding think at the outcome", "Item",
 CellChangeTimes->{{3.7704629033698587`*^9, 
  3.770462922212081*^9}},ExpressionUUID->"4bafd196-553d-4e50-be8f-\
c296ad1cbb36"],

Cell["\<\
Split your project in components, write down responsibility, write down a \
pipeline, try to anticipate possible problems and outcomes \
\>", "Item",
 CellChangeTimes->{{3.7704629033698587`*^9, 
  3.770462951712925*^9}},ExpressionUUID->"1bddc69d-03b4-4c61-bd20-\
34b9b32d0422"],

Cell["Failure is not your enemy", "Item",
 CellChangeTimes->{{3.7704629033698587`*^9, 3.770462947889649*^9}, 
   3.7704713627072973`*^9},ExpressionUUID->"f3b3c346-47ae-4e44-9627-\
a49729712462"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Principles and Concepts ", "Subsubsection",
 CellChangeTimes->{{3.770471371662208*^9, 
  3.770471378760848*^9}},ExpressionUUID->"6a2d2e45-4e99-45d6-b4a2-\
ba68f5d7e8a8"],

Cell["Expressions", "Item",
 CellChangeTimes->{
  3.770471397878028*^9, {3.770471452667224*^9, 
   3.770471454106216*^9}},ExpressionUUID->"6e18b5e9-ebbc-49c0-8fab-\
d78350753d6c"],

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{"32.82", ",", " ", "\"\<USDollars\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.770471466331127*^9, 3.770471486950365*^9}, {
  3.770471525657202*^9, 3.770471536701457*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"8de778bb-0c92-4347-a84d-24007709a749"],

Cell[BoxData[
 TemplateBox[{InterpretationBox[
    TagBox[
     InterpretationBox["\"32.82\"", 32.82, AutoDelete -> True], 
     NumberForm[#, {Infinity, 2}, DigitBlock -> 3, NumberSeparator -> 
      "\[ThinSpace]"]& ], 32.82, Selectable -> False],RowBox[{
     FormBox["\"$\"", TraditionalForm], "\[VeryThinSpace]"}],"US dollars",
   "\"USDollars\""},
  "QuantityPrefix"]], "Input",
 CellChangeTimes->{{3.77047162969903*^9, 
  3.770471666790926*^9}},ExpressionUUID->"ea12258e-d854-4e99-b416-\
777912794b81"],

Cell["Head and Body", "Item",
 CellChangeTimes->{{3.770471669305674*^9, 
  3.770471705887163*^9}},ExpressionUUID->"21eb248b-3e67-4286-806b-\
07900086c5f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.770471689130125*^9, 3.770471690092594*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"4747054c-bf79-4a09-9809-cc612af6a9f7"],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.770471690412471*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"43d3c3eb-0d78-4a73-b219-c4f7731657be"]
}, Open  ]],

Cell["Body may be empty", "Item",
 CellChangeTimes->{{3.770471699217382*^9, 
  3.7704717124622793`*^9}},ExpressionUUID->"7bc4919b-e9a0-4508-bd52-\
b111e4ba810c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", "]"}]], "Input",
 CellChangeTimes->{{3.770471714619742*^9, 3.770471715921401*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"debc6f87-0108-47d4-9df7-a2b33b0d3a0d"],

Cell[BoxData[
 RowBox[{"f", "[", "]"}]], "Output",
 CellChangeTimes->{3.770471718432325*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"c342b934-a478-48cd-8b0f-e843d3d23b0f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compound Atomic Expressions", "Item",
 CellChangeTimes->{{3.770471739372044*^9, 
  3.77047175026304*^9}},ExpressionUUID->"2211429b-f0af-446a-a8d5-\
589fe968cebe"],

Cell["Graph", "Subitem",
 CellChangeTimes->{{3.770471739372044*^9, 
  3.770471753237051*^9}},ExpressionUUID->"c807467d-249d-497d-a7f6-\
2215acbe5589"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Graph", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "b"}], ",", " ", 
      RowBox[{"b", "\[Rule]", "c"}], ",", " ", 
      RowBox[{"b", "\[Rule]", "d"}]}], "}"}], ",", " ", 
    RowBox[{"VertexLabels", "\[Rule]", "Automatic"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.770471827069035*^9, 3.770471850225515*^9}, {
  3.770471912783915*^9, 3.7704719203630037`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"81d50baf-34ed-4f68-8cc0-d87ce82564b3"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`a, $CellContext`b, $CellContext`c, $CellContext`d}, \
{{{1, 2}, {2, 3}, {2, 4}}, Null}, {VertexLabels -> {Automatic}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 0.}, {0.7745966692414834, 0.7745966692414834}}, {{
         0.7745966692414834, 0.7745966692414834}, {0.7745966692414834, 
         0.}}, {{0.7745966692414834, 0.7745966692414834}, {
         1.5491933384829668`, 0.}}}, 0.018845521490452433`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.}, 0.018845521490452433], 
         InsetBox["a", 
          Offset[{2, 2}, {0.018845521490452433, 0.018845521490452433}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7745966692414834, 0.7745966692414834}, 
          0.018845521490452433], 
         InsetBox["b", 
          Offset[{2, 2}, {0.7934421907319358, 0.7934421907319358}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.7745966692414834, 0.}, 0.018845521490452433], 
         InsetBox["c", 
          Offset[{2, 2}, {0.7934421907319358, 0.018845521490452433}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.5491933384829668, 0.}, 0.018845521490452433], 
         InsetBox["d", 
          Offset[{2, 2}, {1.5680388599734192, 0.018845521490452433}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.770471854605228*^9, 3.770471921728046*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"23d5768d-e11d-4c94-92df-14c00e4ed136"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notation Style", "Item",
 CellChangeTimes->{{3.7704725203174677`*^9, 
  3.770472527956324*^9}},ExpressionUUID->"5836d05d-c1dc-4356-83b2-\
7873580ae51f"],

Cell["FullForm", "Subitem",
 CellChangeTimes->{{3.7704725203174677`*^9, 
  3.7704725304585657`*^9}},ExpressionUUID->"9bc39cc8-8cbe-45c9-910a-\
baea30724edf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Plus", "[", 
  RowBox[{"2", ",", " ", 
   RowBox[{"Times", "[", 
    RowBox[{"3", ",", "x"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770472532916027*^9, 3.7704725448644667`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"e1d067d9-9b58-4ab6-85d2-1f7ded61a26f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", " ", 
  RowBox[{"2", " ", "+", " ", 
   RowBox[{"3", " ", "*", " ", "y"}]}]}]], "Input",
 CellChangeTimes->{{3.7714664122336397`*^9, 3.771466427632395*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"29e31fcb-ac1b-4890-8585-fb5cd8559be7"],

Cell[BoxData[
 RowBox[{"2", "+", 
  RowBox[{"3", " ", "y"}]}]], "Output",
 CellChangeTimes->{3.7714664280345793`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ee2733e0-52d1-4aa7-9e10-87ea1b0899e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "//", "FullForm"}]], "Input",
 CellChangeTimes->{{3.77047255836169*^9, 3.770472561179192*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"15208e73-0024-4521-ba9a-5bbdf38e9a91"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{"2", ",", 
     RowBox[{"Times", "[", 
      RowBox[{"3", ",", "y"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellChangeTimes->{3.7704725616164207`*^9, 3.77146643695123*^9},
 CellLabel->
  "Out[26]//FullForm=",ExpressionUUID->"78fec519-b559-495e-8882-551d2886f623"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"q", "=", " ", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"r", "=", "4"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"s", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"q", "^", 
   RowBox[{"(", 
    RowBox[{"r", "-", "s"}], ")"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7704727888773127`*^9, 3.770472829686545*^9}, {
  3.770472868100638*^9, 3.770472875666935*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"84a1ec4b-ada6-436c-82b6-d87500bb6943"],

Cell["Postfix", "Item",
 CellChangeTimes->{{3.7704729067275553`*^9, 
  3.770472910535841*^9}},ExpressionUUID->"69ed79ea-6838-417c-a005-\
058fb2760bf0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{"Cos", ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], " ", "//", " ", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{"#", ",", "3"}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.7704729230044203`*^9, 3.770472945387575*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"1e32e475-2f3b-4ec2-b0d0-1e2346807283"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Cos", "[", "1", "]"}], ",", 
   RowBox[{"3", "+", 
    RowBox[{"Cos", "[", "2", "]"}]}], ",", 
   RowBox[{"3", "+", 
    RowBox[{"Cos", "[", "3", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.770472947028153*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"60503a60-18fc-44b9-a58a-ca5a2bef32a5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"x", "=", " ", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "10"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3"}], "}"}]}], "]"}], " ", "//", " ", 
   "Grid"}]}]], "Input",
 CellChangeTimes->{{3.770472967732285*^9, 3.7704730086945267`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"a93a704c-8ad3-42bc-8f83-3c3575ed1b71"],

Cell[BoxData[
 TagBox[GridBox[{
    {"8", "4", "7"},
    {"9", "4", "1"},
    {"2", "3", "5"},
    {"5", "0", "2"},
    {"10", "2", "5"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Input",
 CellChangeTimes->{{3.770473937696*^9, 3.7704739377030573`*^9}, {
  3.7704753472241287`*^9, 
  3.7704753502148743`*^9}},ExpressionUUID->"7482cd50-b262-47a8-bf70-\
3fe5b0648439"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training for Programmers", "Subsubsection",
 CellChangeTimes->{{3.770475355104992*^9, 3.770475359698275*^9}, {
  3.770475562744071*^9, 
  3.770475563867737*^9}},ExpressionUUID->"72e1686b-d48f-47a3-bc78-\
dd065c07cad7"],

Cell["Symbols", "Item",
 CellChangeTimes->{{3.7704755654666758`*^9, 
  3.77047556665308*^9}},ExpressionUUID->"7738a5b4-0ada-4637-bb1b-\
55c8060ba0d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7704754846434393`*^9, 3.770475504229849*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"b882378c-cba8-4de0-b5fe-2ee535f827d7"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"},
     {"5", "6"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.7704755051170473`*^9},
 CellLabel->
  "Out[71]//MatrixForm=",ExpressionUUID->"4fa44cf6-94e4-4d69-98a4-\
8854cb262feb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "//", 
   "MatrixForm"}]}]], "Input",
 CellChangeTimes->{{3.77047595843286*^9, 3.770475978205007*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"37b1a9a4-50ed-4081-b0f1-10d5615b909d"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.770475978680101*^9},
 CellLabel->
  "Out[76]//MatrixForm=",ExpressionUUID->"e24b9a0a-f8aa-4878-a681-\
7c8ffad0a00b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"y", " ", "=", " ", 
  RowBox[{"Plus", "[", 
   RowBox[{
    RowBox[{"Times", "[", 
     RowBox[{"3", ",", 
      RowBox[{"Power", "[", 
       RowBox[{"x", ",", "2"}], "]"}]}], "]"}], ",", " ", 
    RowBox[{"Times", "[", 
     RowBox[{"2", ",", "x"}], "]"}], ",", "4"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.770475513613351*^9, 3.7704755458833523`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"cfc25c07-fd09-4807-9e87-b7049310fda9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"4", "+", 
  RowBox[{"2", " ", "x"}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "2"]}]}], "\[IndentingNewLine]", 
 RowBox[{"TreeForm", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.7704757159378967`*^9, 3.770475721297345*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"b3a76108-d63f-4705-a3b3-3bbfb90dd7af"],

Cell[BoxData[
 RowBox[{"4", "+", 
  RowBox[{"2", " ", "x"}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{3.7704757217165728`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"b2b4e25a-4380-4c60-b124-c08db76089dd"],

Cell[BoxData[
 GraphicsBox[
  TagBox[GraphicsComplexBox[{{1.1523319193960637`, 2.3046638387921274`}, {0., 
    1.5364425591947515`}, {0.7682212795973759, 1.5364425591947515`}, {
    0.3841106397986879, 0.7682212795973757}, {1.1523319193960637`, 
    0.7682212795973757}, {2.3046638387921274`, 1.5364425591947515`}, {
    1.9205531989934397`, 0.7682212795973757}, {2.6887744785908154`, 
    0.7682212795973757}, {2.3046638387921274`, 0.}, {3.0728851183895034`, 
    0.}}, {
     {RGBColor[0.55, 0.45, 0.45], 
      LineBox[{{1, 2}, {1, 3}, {1, 6}, {3, 4}, {3, 5}, {6, 7}, {6, 8}, {8, 
       9}, {8, 10}}]}, {
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["Plus", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 1],
        TagBox[
         RowBox[{"4", "+", 
           RowBox[{"2", " ", "x"}], "+", 
           RowBox[{"3", " ", 
             SuperscriptBox["x", "2"]}]}], HoldForm]],
       Annotation[#, 
        HoldForm[4 + 2 $CellContext`x + 3 $CellContext`x^2], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["4",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 2],
        TagBox["4", HoldForm]],
       Annotation[#, 
        HoldForm[4], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["Times", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 3],
        TagBox[
         RowBox[{"2", " ", "x"}], HoldForm]],
       Annotation[#, 
        HoldForm[2 $CellContext`x], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["2",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 4],
        TagBox["2", HoldForm]],
       Annotation[#, 
        HoldForm[2], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["x",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 5],
        TagBox["x", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`x], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["Times", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 6],
        TagBox[
         RowBox[{"3", " ", 
           SuperscriptBox["x", "2"]}], HoldForm]],
       Annotation[#, 
        HoldForm[3 $CellContext`x^2], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["3",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 7],
        TagBox["3", HoldForm]],
       Annotation[#, 
        HoldForm[3], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox["Power", "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 8],
        TagBox[
         SuperscriptBox["x", "2"], HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`x^2], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["x",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 9],
        TagBox["x", HoldForm]],
       Annotation[#, 
        HoldForm[$CellContext`x], "Tooltip"]& ], 
      TagBox[
       TooltipBox[InsetBox[
         FrameBox[
          StyleBox[
           TagBox["2",
            HoldForm], "StandardForm", "Output",
           StripOnInput->False,
           LineColor->GrayLevel[0],
           FrontFaceColor->GrayLevel[0],
           BackFaceColor->GrayLevel[0],
           GraphicsColor->GrayLevel[0],
           FontSize->Scaled[0.05],
           FontColor->GrayLevel[0]],
          Background->RGBColor[1., 1., 0.871],
          FrameStyle->GrayLevel[0.5],
          StripOnInput->False], 10],
        TagBox["2", HoldForm]],
       Annotation[#, 
        HoldForm[2], "Tooltip"]& ]}}],
   Annotation[#, 
    VertexCoordinateRules -> {{1.1523319193960637`, 2.3046638387921274`}, {0.,
      1.5364425591947515`}, {0.7682212795973759, 1.5364425591947515`}, {
     0.3841106397986879, 0.7682212795973757}, {1.1523319193960637`, 
     0.7682212795973757}, {2.3046638387921274`, 1.5364425591947515`}, {
     1.9205531989934397`, 0.7682212795973757}, {2.6887744785908154`, 
     0.7682212795973757}, {2.3046638387921274`, 0.}, {3.0728851183895034`, 
     0.}}]& ],
  AspectRatio->NCache[2 Rational[2, 11]^Rational[1, 2], 0.8528028654224418],
  FormatType:>StandardForm,
  FrameTicks->Automatic,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.770475721789626*^9},
 CellLabel->
  "Out[75]//TreeForm=",ExpressionUUID->"971209ce-3ddd-4016-95f7-b3ab21414aab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.770475630678261*^9, 3.7704756320618362`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"ab6b20af-f71a-4940-8977-c139ecaa534d"],

Cell[BoxData["Symbol"], "Output",
 CellChangeTimes->{3.770475632628131*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"9ac343ec-d8ee-4a3c-9bd0-59b70d8194f6"]
}, Open  ]],

Cell["Head of objects themselves are symbols", "Item",
 CellChangeTimes->{{3.770475645428688*^9, 3.770475652312481*^9}, {
  3.770476196181444*^9, 3.770476196183958*^9}, {3.770476268687017*^9, 
  3.770476268687662*^9}},ExpressionUUID->"5fc69daf-7cf2-4c47-a7fe-\
0fffbd968386"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SymbolName", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.7704762737002277`*^9, 3.77047628703432*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"d800e204-f909-46e5-a92f-c69c3b2fa9f4"],

Cell[BoxData["\<\"x\"\>"], "Output",
 CellChangeTimes->{3.7704762872905807`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"5d2947fc-fea6-4cfa-805e-8420561cb569"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7704763411903563`*^9, 3.770476355413351*^9}, {
  3.770476443255765*^9, 3.770476449229599*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"1a626dae-dc84-480f-a6dc-77309af99d9e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"expr\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"i\"\>", 
   ",", "\<\"Matrix\"\>", ",", "\<\"opts\"\>", ",", "\<\"pi\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"sol\"\>", 
   ",", "\<\"system\"\>", ",", "\<\"t\"\>", ",", "\<\"t$\"\>", 
   ",", "\<\"uspec\"\>", ",", "\<\"x\"\>", ",", "\<\"X\"\>", 
   ",", "\<\"x$\"\>", ",", "\<\"y\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.770476356125413*^9, {3.770476444346875*^9, 3.770476450172113*^9}},
 CellLabel->"Out[87]=",ExpressionUUID->"5b362de3-c2e3-4ba2-8ab7-ec89930c80e9"]
}, Open  ]],

Cell["Pure Functions", "Item",
 CellChangeTimes->{{3.770476485598493*^9, 
  3.770476488102481*^9}},ExpressionUUID->"c5dc8039-a2f7-4f7e-95cb-\
dae74025d3ce"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.7704766174769506`*^9, 3.770476618472517*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"514d9d85-217a-4575-b7b2-703e2c450d48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"#", " ", "/", " ", "2"}], "]"}], "[", "x", "]"}], " "}]], "Input",\

 CellChangeTimes->{{3.7704765078830967`*^9, 3.770476528205071*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"4c69a5a1-0e45-43d4-9d96-898a75238957"],

Cell[BoxData[
 FractionBox["x", "2"]], "Output",
 CellChangeTimes->{3.7704765298357563`*^9, 3.770476622632284*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"a6e74b0f-32cc-49eb-be66-a36061129612"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"#1", " ", "/", " ", "2"}], "+", " ", "#2"}], "]"}], "[", 
  RowBox[{"x", ",", " ", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.770476553316237*^9, 3.7704765883410587`*^9}, {
  3.770476634136932*^9, 3.770476634313262*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"0d7de9ea-4905-4df3-8145-70cb0e213a58"],

Cell[BoxData[
 RowBox[{"4", "+", 
  FractionBox["x", "2"]}]], "Output",
 CellChangeTimes->{
  3.770476589009892*^9, {3.770476620730771*^9, 3.7704766347684402`*^9}},
 CellLabel->"Out[98]=",ExpressionUUID->"e75d1112-6a58-49bb-9782-cc6868a2936c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"arg1", ",", " ", "arg2"}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"arg1", "/", " ", "2"}], " ", "+", " ", "arg2"}]}], "]"}], "[", 
  RowBox[{"x", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.770476688183223*^9, 3.7704767200227137`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"dbe857f1-15f0-4d0a-8d70-38b157fa4e69"],

Cell[BoxData[
 RowBox[{"4", "+", 
  FractionBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.770476720393968*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"ce786ecb-1420-4082-a729-b45426910af7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["June 26, 2019", "Section",
 CellChangeTimes->{{3.7705462686166897`*^9, 
  3.7705462758809843`*^9}},ExpressionUUID->"1a2e1a33-033f-4f6e-abcb-\
b79161ee9271"],

Cell[CellGroupData[{

Cell["Structured Data", "Subsection",
 CellChangeTimes->{{3.770546286575005*^9, 3.7705462905094337`*^9}, 
   3.770546644064879*^9, {3.770547139960895*^9, 
   3.770547140432396*^9}},ExpressionUUID->"f8d6890a-3e9d-4a98-8e0e-\
fe7696b67911"],

Cell[CellGroupData[{

Cell["List", "Subsubsection",
 CellChangeTimes->{{3.770547171755*^9, 3.7705471742756157`*^9}, {
  3.770547231993493*^9, 
  3.770547236862371*^9}},ExpressionUUID->"2182fbe4-2b89-41bd-a573-\
e9b9e9318030"],

Cell["\<\
General objects that represent collections of arbitrary objects\
\>", "Item",
 CellChangeTimes->{{3.770547239901417*^9, 
  3.7705472620128927`*^9}},ExpressionUUID->"9a902112-f14e-4f5e-ba2f-\
b27244fc6aa3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", " ", 
   RowBox[{"Region", "@", 
    RowBox[{"Cone", "[", "]"}]}], ",", " ", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.77054726391474*^9, 3.770547311969469*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"67db5faa-2d51-43ce-8b04-785c92c98bfd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   Graphics3DBox[
    TagBox[
     DynamicModuleBox[{Typeset`region = HoldComplete[
       Region[
        Cone[{{0, 0, -1}, {0, 0, 1}}]]]}, 
      TagBox[{ConeBox[{{0, 0, -1}, {0, 0, 1}}], {}},
       MouseAppearanceTag["LinkHand"]],
      AllowKernelInitialization->False],
     "RegionGraphics3D",
     AutoDelete->True,
     Editable->False,
     Selectable->False],
    BaseStyle->{
      EdgeForm[None], 
      Hue[0.6, 0.3, 0.85]},
    Boxed->False,
    Lighting->{{"Ambient", 
       GrayLevel[0.45]}, {"Directional", 
       GrayLevel[0.3], 
       ImageScaled[{2, 0, 2}]}, {"Directional", 
       GrayLevel[0.33], 
       ImageScaled[{2, 2, 2}]}, {"Directional", 
       GrayLevel[0.3], 
       ImageScaled[{0, 2, 2}]}}], ",", 
   GraphicsBox[{{{}, {}, 
      TagBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1: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
         "]]},
       Annotation[#, "Charting`Private`Tag$19043#1"]& ]}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, 
       Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
       Charting`ScaledFrameTicks[{Identity, Identity}]}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    Method->{
     "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultMeshStyle" -> AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Identity[#]& )[
           Part[#, 1]], 
          (Identity[#]& )[
           Part[#, 2]]}& )}},
    PlotRange->
     NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
       0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.770547313948995*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"fcb836ae-925f-4eae-8d66-0aec6ca7276d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["MatrixForm is only output style, still just nested list ", "Item",
 CellChangeTimes->{{3.770547327958654*^9, 3.7705473441664457`*^9}, {
  3.7705473922289124`*^9, 
  3.770547392233391*^9}},ExpressionUUID->"1c0218bb-3a3a-47c1-a0c6-\
8f3bab75fe98"],

Cell["To extract element, use Part, sort form [[]]", "Item",
 CellChangeTimes->{{3.770547327958654*^9, 3.7705473441664457`*^9}, {
  3.770547392699623*^9, 
  3.770547405212801*^9}},ExpressionUUID->"c6046789-3bc1-445d-b8f3-\
a2f8ec4c478f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", " ", 
  RowBox[{"List", "[", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.770547415078432*^9, 3.770547427946271*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"fcb7b454-d930-402b-9367-a89dd48a6d94"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7705474293680363`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"d6aec747-dcb9-424b-a62b-bc5e3e3728c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"a", ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.770547431292947*^9, 3.770547433632544*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"de2998f9-1e70-473c-ab4a-ee5a688ae947"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.77054743426189*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"08b1c6bd-667d-42a3-a1ba-33b5d1b70952"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.770547441522587*^9, 3.770547442994195*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"f50cc656-b4dd-4f33-ac3e-934bba005871"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.770547443524864*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"a6213810-f2df-4454-b683-6f095ae147f6"]
}, Open  ]],

Cell["Extract/Take can also be used to extract parts from a list ", "Item",
 CellChangeTimes->{{3.77054781711731*^9, 
  3.7705478312772093`*^9}},ExpressionUUID->"b2d5cba2-64f1-400b-99fa-\
31bb5cb2cae4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"a", ",", "3"}], "]"}]], "Input",
 CellChangeTimes->{{3.7705478420477743`*^9, 3.770547847683093*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"5c6f78bd-3cd2-465e-9bdc-284dd408d4ae"],

Cell[BoxData["3"], "Output",
 CellChangeTimes->{3.770547847968314*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"ce763349-e414-4fb2-b8f9-aa00d53752e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
ReplacePart can also be used to create a new list with parts that have been \
modified \
\>", "Item",
 CellChangeTimes->{{3.770548275585013*^9, 
  3.770548291054947*^9}},ExpressionUUID->"13ecd2ad-8858-48b3-8f1d-\
4a50de02e19c"],

Cell["Flatten converts nested list into an unnested list:", "Item",
 CellChangeTimes->{{3.770548446593542*^9, 
  3.770548476049901*^9}},ExpressionUUID->"3632689d-e5c8-44a6-87c6-\
ce672e61babf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.770548509279963*^9, 3.770548516778558*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c3322c6b-3b79-48f7-a177-2a6c414936c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m1", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"d", ",", " ", "e", ",", " ", "f"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.770548478691082*^9, 3.770548523539073*^9}, {
  3.770548624571637*^9, 3.770548628092554*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"c3b1825a-c252-4f80-8c5c-44f43f70401d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.7705485008069963`*^9, 3.7705485241159143`*^9}, {
  3.770548626377409*^9, 3.770548628917016*^9}},
 CellLabel->"Out[31]=",ExpressionUUID->"c9ff0680-c8cf-472b-a843-11c552054d2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"m1", " ", "//", " ", "MatrixForm"}]}]], "Input",
 CellChangeTimes->{{3.7705486306844788`*^9, 3.770548650950128*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"02de033c-3bc1-4a9c-bfde-17ca9706be03"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"a", "b", "c"},
     {"d", "e", "f"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.770548637172758*^9, 3.770548651470031*^9}},
 CellLabel->
  "Out[34]//MatrixForm=",ExpressionUUID->"bca63f18-008b-4cc8-8ec8-\
a38a0ec2137d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", "m1", "]"}]], "Input",
 CellChangeTimes->{{3.770548527016418*^9, 3.770548529381377*^9}, {
  3.770548576747489*^9, 3.7705485894777813`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"f70eb368-75f0-44d1-b054-351e5c09ad2a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.770548529790669*^9, 3.770548589954494*^9, {3.770548640212472*^9, 
   3.770548679140854*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"c0c2f41d-6638-4028-b554-09f3820eae27"]
}, Open  ]],

Cell["Table can be used to create a list:", "Item",
 CellChangeTimes->{{3.770548696330882*^9, 
  3.770548700949486*^9}},ExpressionUUID->"5f21829c-fdb1-4963-a546-\
2dd5486c55a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7705487098880997`*^9, 3.770548729471114*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"569f103b-cc38-46c3-80f4-5026ec555e9e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.7705487298295603`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"e92b6fc3-e346-48e6-9975-ec8b71dac0f8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["PackedArray", "Subsubsection",
 CellChangeTimes->{{3.770547185618511*^9, 
  3.770547186989829*^9}},ExpressionUUID->"3f6324ca-e77b-4500-9a23-\
a8682d24be79"],

Cell["\<\
In order to reduced memory space taken up by Lists, PackedArray was \
introduced to hold uniform Integer, Real, and Complex values \
\>", "Item",
 CellChangeTimes->{{3.7705495168037252`*^9, 
  3.770549556327568*^9}},ExpressionUUID->"6e470a25-fd04-4807-a4af-\
aea0e9c398b0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Sin", "[", "packedRealArray", "]"}], ";"}], " ", "//", 
  "AbsoluteTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Sin", "[", "unpackedRealArray", "]"}], ";"}], " ", "//", 
  "AbsoluteTiming"}]}], "Input",
 CellChangeTimes->{{3.738938650758912*^9, 3.738938680615636*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"59e8a6b1-90d8-47da-a57c-05524c1e47c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002615`", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.7705496155125103`*^9, 3.77054964360258*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"aecff02e-c5d5-42c0-a1fb-1f44ef8f6cf3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.`*^-6", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.7705496155125103`*^9, 3.770549643604479*^9}},
 CellLabel->"Out[50]=",ExpressionUUID->"13191f34-ce9e-4abf-9f13-965c08385763"]
}, Open  ]],

Cell["\<\
Packed arrays use less memory, automatically used when possible\
\>", "Item",
 CellChangeTimes->{{3.770549445058419*^9, 3.770549457978958*^9}, {
  3.770549680881589*^9, 
  3.770549705437414*^9}},ExpressionUUID->"dfd17466-a5a1-44b3-809e-\
e2f2dbdb3dd1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dynamic Interfaces and Sharing Content ", "Subsection",
 CellChangeTimes->{{3.770550834923774*^9, 
  3.770550842410214*^9}},ExpressionUUID->"07fd4c2a-f94e-4895-9c17-\
748d37d33cac"],

Cell["Manipulate", "Item",
 CellChangeTimes->{{3.770550956079851*^9, 
  3.7705509581575747`*^9}},ExpressionUUID->"11af8db9-0e6e-45ee-8f8b-\
572337fb0a54"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"a", " ", "x"}]}], ")"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "6"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "0", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770551190271832*^9, 3.770551190273877*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"a4e90acf-5ce8-4a30-83c3-b704c374894b"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 0.395, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`a$$], 0, 2}}, Typeset`size$$ = {360., {105., 109.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`a$29844$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`a$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$29844$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        Sin[$CellContext`x (
          1 + $CellContext`a$$ $CellContext`x)], {$CellContext`x, 0, 6}], 
      "Specifications" :> {{$CellContext`a$$, 0, 2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{405., {150., 156.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.77055096832504*^9, 3.7705509900430193`*^9}, 
   3.77055102207465*^9, {3.7705511605072117`*^9, 3.7705511908851748`*^9}},
 CellLabel->"Out[57]=",ExpressionUUID->"2ad330c5-29ad-445c-ba63-6aed13bf7b11"]
}, Open  ]],

Cell["Custom Dynamic Interfaces", "Item",
 CellChangeTimes->{{3.770551342636404*^9, 
  3.770551346198216*^9}},ExpressionUUID->"26ba69a2-a70b-4ce7-93d2-\
371bdbda4052"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.7705645411157722`*^9, 3.770564542797213*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"7957ef50-803a-4366-a246-7142f8fe129f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", " ", "=", " ", "True"}]], "Input",
 CellChangeTimes->{{3.77055173373382*^9, 3.770551742097559*^9}, {
  3.770564550405418*^9, 3.7705645536418877`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"8ec8f7d2-e89b-4278-9367-f70f7eee6ecb"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.770551743163973*^9, 3.77056455473109*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"37c61b1e-c7eb-444f-b770-018e6378ad63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dynamic", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.770551744838181*^9, 3.770551751088409*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"900b5a24-3e0f-4f26-a7ba-5c8df9d86582"],

Cell[BoxData[
 DynamicBox[ToBoxes[$CellContext`x, StandardForm],
  ImageSizeCache->{41., {3., 9.}}]], "Output",
 CellChangeTimes->{3.770551751410561*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"c2ae853e-6fcb-4774-b73b-395d56327bb4"]
}, Open  ]],

Cell["Button", "Item",
 CellChangeTimes->{{3.770551759143251*^9, 
  3.770551760330101*^9}},ExpressionUUID->"a56e542d-4957-4962-ac33-\
e48ead1676e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", " ", "=", " ", "True"}], ";"}]], "Input",
 CellChangeTimes->{{3.7705517633903027`*^9, 3.770551774955729*^9}, {
  3.770551810304429*^9, 
  3.7705518208596363`*^9}},ExpressionUUID->"ecc0a39e-8375-4fd1-bd17-\
65a1d4bceec9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<toggle x\>\"", ",", " ", 
   RowBox[{"x", "=", " ", 
    RowBox[{"Not", "@", "x"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770551777995411*^9, 3.77055179209621*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"69b677cc-8f43-4006-84cb-1711a94ca5d7"],

Cell[BoxData[
 ButtonBox["\<\"toggle x\"\>",
  Appearance->Automatic,
  ButtonFunction:>($CellContext`x = Not[$CellContext`x]),
  Evaluator->Automatic,
  Method->"Preemptive"]], "Output",
 CellChangeTimes->{3.770551792753436*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"59aabac9-5a86-4575-be6e-5ab9244404b3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["June 27, 2019", "Section",
 CellChangeTimes->{{3.770631892553423*^9, 
  3.7706318946468773`*^9}},ExpressionUUID->"381b4b4d-50bd-4761-b1db-\
c6fd1851f725"],

Cell[CellGroupData[{

Cell["Image Processing", "Subsection",
 CellChangeTimes->{{3.770631913156159*^9, 3.770631919018869*^9}, {
  3.770636625942556*^9, 
  3.770636628766711*^9}},ExpressionUUID->"8b4575cf-d13e-4a13-aa38-\
3e1b15ad7f28"],

Cell[CellGroupData[{

Cell["\<\
Files can be imported using Import[] function, drag n drop, or copy + paste\
\>", "Item",
 CellChangeTimes->{{3.770636706015605*^9, 
  3.7706367678163557`*^9}},ExpressionUUID->"beb51433-6ca7-4953-bb31-\
f0cca3fc7f0c"],

Cell["Rasterizing expressions (plots, equations), into image ", "Item",
 CellChangeTimes->{{3.770637161883676*^9, 
  3.7706371853790007`*^9}},ExpressionUUID->"fd5c4c4a-9218-4985-bf85-\
75ea3a1e5135"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", " ", "=", " ", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", "Pi"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.770637187643228*^9, 3.7706372015284452`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"db12f43e-1c62-4bcd-b1f9-ea7a761e0fc8"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$185163#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->
   NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
     0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.770637202227624*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"d3964437-bf50-46a2-8edf-6076f2ac72f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img", " ", "=", " ", 
  RowBox[{"Rasterize", "[", 
   RowBox[{"expr", ",", " ", 
    RowBox[{"RasterSize", "\[Rule]", "200"}], ",", " ", 
    RowBox[{"ImageResolution", "\[Rule]", "32"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.770637204400498*^9, 3.770637211352442*^9}, {
  3.770637245802312*^9, 3.770637258241152*^9}, {3.770637296523835*^9, 
  3.770637304772649*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"cfc63e24-9c1b-4754-8753-15e71566776a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
GDrAusLQAdYVhg5wPYjBYLjA/wHx6Ege
    "], {{0, 119}, {200, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> 32, Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{200, 119},
  PlotRange->{{0, 200}, {0, 119}}]], "Output",
 CellChangeTimes->{
  3.770637211787086*^9, {3.770637250361158*^9, 3.77063725975707*^9}, 
   3.770637305316752*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"d83795ed-c8aa-471b-a000-d9767fe30beb"]
}, Open  ]],

Cell["\<\
Array --> Image, 2D and 3D images can be created from 2d or 3d arrays \
\>", "Item",
 CellChangeTimes->{{3.7706373552062483`*^9, 
  3.770637405201301*^9}},ExpressionUUID->"a5b1a828-e961-4f7f-b9d6-\
2ab34fa2e196"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PixelValue", "[", 
  RowBox[{"img", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.770637372962103*^9, 3.7706373744161987`*^9}, {
  3.770637417229804*^9, 3.770637429817212*^9}, {3.770637504722474*^9, 
  3.7706375522803087`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"4d694fc0-fe9b-403a-b79d-f81f7771f939"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6`", ",", "0.6`", ",", "0.6`"}], "}"}]], "Output",
 CellChangeTimes->{3.770637552940774*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"c05bb60a-b952-4758-b75b-6101fd02a2b8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["June 28, 2019", "Section",
 CellChangeTimes->{{3.7707198188938437`*^9, 
  3.770719823625061*^9}},ExpressionUUID->"cd83a227-e9be-4e15-83f1-\
991ee6e65131"],

Cell[CellGroupData[{

Cell["Machine Learning I", "Subsection",
 CellChangeTimes->{{3.77071983890458*^9, 
  3.770719860180819*^9}},ExpressionUUID->"e4d0e18f-d064-48fe-84ee-\
1d42a0042627"],

Cell[CellGroupData[{

Cell["Programming without giving explicit instruction", "Item",
 CellChangeTimes->{{3.770719964765441*^9, 
  3.770719978902969*^9}},ExpressionUUID->"c4137973-144d-461b-b783-\
fb021a0e9b1a"],

Cell["Typically, a computer \[OpenCurlyDoubleQuote]learns\
\[CloseCurlyDoubleQuote] a model from data", "Item",
 CellChangeTimes->{{3.770719964765441*^9, 
  3.770719985872867*^9}},ExpressionUUID->"4ea8e412-3429-4efa-b28f-\
ec209542b5ac"],

Cell[CellGroupData[{

Cell["model = program with tunable parameters", "Subitem",
 CellChangeTimes->{{3.770719964765441*^9, 
  3.770719995289524*^9}},ExpressionUUID->"09cf0f84-427a-4b75-8775-\
9b64aa218182"],

Cell["learning = tuning parameters to fit data", "Subitem",
 CellChangeTimes->{{3.770719964765441*^9, 
  3.7707200126875467`*^9}},ExpressionUUID->"beb3e77d-c179-40d1-b48d-\
c4982fda35dd"],

Cell["how can we tune the parameters to fit our data model ", "Subitem",
 CellChangeTimes->{{3.770719964765441*^9, 3.770720024324139*^9}, {
  3.7707201920210648`*^9, 
  3.770720192024547*^9}},ExpressionUUID->"565efa82-9590-4f5c-8a7c-\
c3e0ec0dc85d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Supervised Learning ", "Subsubsection",
 CellChangeTimes->{{3.770720217871393*^9, 
  3.770720221691347*^9}},ExpressionUUID->"867ea4a3-0a5a-4b84-8664-\
fddf6791dc72"],

Cell[CellGroupData[{

Cell["Input \[Rule] output mapping from examples ", "Item",
 CellChangeTimes->{{3.770720224395372*^9, 
  3.770720246087207*^9}},ExpressionUUID->"f98d923c-d0b3-46db-b2cc-\
79d1f70743c5"],

Cell["Most common paradigm", "Item",
 CellChangeTimes->{{3.770720224395372*^9, 
  3.770720249812621*^9}},ExpressionUUID->"6fd85165-168f-4df2-afa2-\
4facf8e36ff3"],

Cell["Wolfram Language functions:", "Item",
 CellChangeTimes->{{3.770720224395372*^9, 
  3.7707202594209757`*^9}},ExpressionUUID->"0a0a3245-c059-427e-962f-\
d7fc807085b7"],

Cell[CellGroupData[{

Cell["Classify", "Subitem",
 CellChangeTimes->{{3.770720224395372*^9, 
  3.7707202663723392`*^9}},ExpressionUUID->"44964bcc-fb26-40e5-a69f-\
68a130f7a491"],

Cell["Predict", "Subitem",
 CellChangeTimes->{{3.770720224395372*^9, 
  3.770720267573412*^9}},ExpressionUUID->"4a0dd159-9912-4376-9b6b-\
53812e3214b2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Unsupervised Learning", "Subsubsection",
 CellChangeTimes->{{3.770720274690278*^9, 
  3.7707202778856087`*^9}},ExpressionUUID->"b91f282e-057f-415c-9edc-\
5fd3ca43b528"],

Cell[CellGroupData[{

Cell["Only outputs ", "Item",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.7707202847098207`*^9}},ExpressionUUID->"4ae06d95-aaf7-440e-a1f0-\
77f9dd03aee2"],

Cell["On the rise ", "Item",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720289310083*^9}},ExpressionUUID->"4359e22d-7f72-4038-907d-\
174612deb6c7"],

Cell["Wolfram Language functions:", "Item",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720297193931*^9}},ExpressionUUID->"ac812249-a010-404d-9d3f-\
12e987203485"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ClusterClassify, FindClusters", "Code"]], "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720304069296*^9}},ExpressionUUID->"d53236bf-6b51-4f6c-a612-\
f69ab740d777"],

Cell["DimensionReduction, FeatureExtraction", "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720312245688*^9}},ExpressionUUID->"a3e0dc79-b069-495d-81b6-\
33d5b81bb163"],

Cell["SequencePredict ", "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.7707203162333612`*^9}},ExpressionUUID->"d60b6a60-8376-4f0c-98bf-\
978ec7d8c7c2"],

Cell["LearnDistribution", "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720320136293*^9}},ExpressionUUID->"69f8d8fc-658b-42f1-8cf2-\
be2ba923e7a0"],

Cell["AnamalyDetection", "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 
  3.770720324876498*^9}},ExpressionUUID->"d8441e1b-8ba4-490e-8592-\
7b5e7a433065"],

Cell["SynthesizeMissingValues", "Subitem",
 CellChangeTimes->{{3.770720281538834*^9, 3.77072032861307*^9}, {
  3.770720662473246*^9, 
  3.770720662474554*^9}},ExpressionUUID->"7e982a8d-f874-4bb9-b4d2-\
9dde0814fb15"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reinforcement Learning", "Subsubsection",
 CellChangeTimes->{{3.770720274690278*^9, 3.7707202778856087`*^9}, {
  3.770720681274242*^9, 
  3.770720683055848*^9}},ExpressionUUID->"61753f23-84f9-48af-b31d-\
927f1851de1b"],

Cell[CellGroupData[{

Cell["Active agent, feedback from environment", "Item",
 CellChangeTimes->{{3.770720708697855*^9, 
  3.7707207166068983`*^9}},ExpressionUUID->"5a158cd2-6a49-4d7e-b151-\
87018939c375"],

Cell["Not much used yet ", "Item",
 CellChangeTimes->{{3.770720708697855*^9, 
  3.7707207203581133`*^9}},ExpressionUUID->"3e6f8a7d-0b39-40e2-996a-\
85fc2894454c"],

Cell["Wolfram Language functions:", "Item",
 CellChangeTimes->{{3.770720708697855*^9, 
  3.770720726544054*^9}},ExpressionUUID->"c00c25c5-e3db-4dd0-9de1-\
714ec39ec315"],

Cell["BayesianMinimization ", "Subitem",
 CellChangeTimes->{{3.770720708697855*^9, 3.77072072628907*^9}, {
  3.770720802291202*^9, 
  3.7707208152547092`*^9}},ExpressionUUID->"7e893a5f-04cb-482b-910a-\
304d97840dc6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Automatic Machine Learning Framework", "Subsubsection",
 CellChangeTimes->{{3.7707209199430428`*^9, 3.770720925807629*^9}, {
  3.770720958643585*^9, 
  3.770720959343952*^9}},ExpressionUUID->"2ee4dbcc-439d-421d-a29b-\
a3172066fde6"],

Cell[CellGroupData[{

Cell["Functions:", "Item",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.77072096611594*^9}},ExpressionUUID->"986adca4-1c55-407e-b7f9-\
8377e7d52d96"],

Cell[CellGroupData[{

Cell["Classify & Predict", "Subitem",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.770720975102313*^9}},ExpressionUUID->"ef16478a-d1d8-47eb-b588-\
b4b82401efcd"],

Cell["ClusterClassify, FindClusters", "Subitem",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.770720981265861*^9}},ExpressionUUID->"e1b951ba-1690-4da9-9807-\
8a8b8868aac8"],

Cell["DimensionReduction, FeatureExtraction", "Subitem",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.770720996378957*^9}},ExpressionUUID->"322ecb65-4314-4ef7-849b-\
35fc0dada4b1"]
}, Open  ]],

Cell["Task oriented", "Item",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.770720999271708*^9}},ExpressionUUID->"119fdc0a-fbfa-4a7f-9acc-\
ca6bbd57d96e"],

Cell["Automatic ", "Item",
 CellChangeTimes->{{3.770720961615541*^9, 
  3.770721006447439*^9}},ExpressionUUID->"d7b1715e-ca7c-4f8a-ad84-\
130ae3359afd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network Framework", "Subsubsection",
 CellChangeTimes->{{3.7707211416498117`*^9, 
  3.770721148587686*^9}},ExpressionUUID->"94d5a5d1-f3ef-42ee-ad7d-\
7579b99c532b"],

Cell[CellGroupData[{

Cell["Model oriented ", "Item",
 CellChangeTimes->{{3.770721151393667*^9, 
  3.770721155179042*^9}},ExpressionUUID->"d4658ad8-1b8c-4b1c-a05f-\
18012a85ee0d"],

Cell["High flexibility", "Item",
 CellChangeTimes->{{3.770721151393667*^9, 
  3.770721158277268*^9}},ExpressionUUID->"872db917-a521-4989-a292-\
8dcaa3df2ccb"],

Cell["High performance", "Item",
 CellChangeTimes->{{3.770721151393667*^9, 
  3.7707211618683853`*^9}},ExpressionUUID->"441eece3-bd82-486d-8dda-\
b1fe90e8f038"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["What is a Graph?", "Section",
 CellChangeTimes->{{3.770975183221282*^9, 
  3.770975185019289*^9}},ExpressionUUID->"258cb655-40dd-4c14-9c7c-\
7190b01a7a94"],

Cell[CellGroupData[{

Cell["\<\
A graph is a very general mathematical structure for representing objects \
with pairwise connections between them\
\>", "Item",
 CellChangeTimes->{{3.770975202688743*^9, 3.770975227500408*^9}, 
   3.770982289780197*^9},ExpressionUUID->"cde23619-4029-4bd7-9366-\
6b45c64dc943"],

Cell[CellGroupData[{

Cell["\<\
Physics and Chemistry: models of atomic structure and topology, organic \
molecules, interacting parts of a complex system\
\>", "Subitem",
 CellChangeTimes->{{3.770975202688743*^9, 
  3.7709752517499723`*^9}},ExpressionUUID->"c245ffd7-6f19-4a08-a682-\
15c4dd3c54ea"],

Cell["", "Subitem",
 CellChangeTimes->{{3.770975202688743*^9, 
  3.77097525155755*^9}},ExpressionUUID->"74ffcb41-8b35-4544-8098-\
25c01f1e4b8d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph Theory in the Wolfram Language", "Subsection",
 CellChangeTimes->{{3.770975190475986*^9, 
  3.7709752001751966`*^9}},ExpressionUUID->"c913c276-0f6e-4481-957e-\
9f0574470f90"],

Cell["Constructing and Representing graphs, e.g.:", "Item",
 CellChangeTimes->{{3.770975268222569*^9, 
  3.770975300082041*^9}},ExpressionUUID->"58bc6880-25ce-4e97-bc94-\
b55fcfed6d4a"],

Cell["Graph, GraphData, ExampleData, CompleteGraph", "CodeText",
 CellChangeTimes->{{3.770975282383753*^9, 
  3.770975296004135*^9}},ExpressionUUID->"2851592a-ff52-42e3-8520-\
a83f0221abc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduction to Neural Networks", "Subsection",
 CellChangeTimes->{{3.770982297562277*^9, 
  3.7709823020117292`*^9}},ExpressionUUID->"fdaa4906-20d1-4792-af5c-\
7499cb8dc80c"],

Cell["Image Classification", "Item",
 CellChangeTimes->{{3.770982454093932*^9, 
  3.770982467663941*^9}},ExpressionUUID->"94b80db3-be96-4d0b-b4e3-\
f243f78705cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{
  "NetModel", "[", 
   "\"\<Inception V3 Trained on ImageNet Competition Data\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.770982474681118*^9, 3.770982489854718*^9}},
 CellLabel->
  "In[1479]:=",ExpressionUUID->"4fff566e-5f61-4584-8085-6f336b696475"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["33", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 3, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "ChannelGroups" -> 1, 
                    "$InputSize" -> {299, 299}, "$OutputSize" -> {149, 149}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 3], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 149, 149}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]]], "conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {149, 149}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 149, 149}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 32, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 32, "ChannelGroups" -> 1, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {147, 147}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 32], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 147, 147}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]]], "pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {147, 147}, "$OutputSize" -> {73, 73}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 147, 147}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {73, 73}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 80, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {80, 73, 73}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]]], "conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 80, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 80, "ChannelGroups" -> 1, 
                    "$InputSize" -> {73, 73}, "$OutputSize" -> {71, 71}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 80], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 73, 73}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 71, 71}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {71, 71}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 71, 71}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "Inception1" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 192, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 192, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 32, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 32, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{32, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_chconcat", "Outputs", 
                    "Output"]}], "Inception2" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_1_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_1_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 256, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 256, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 256, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 256], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{256, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_1_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_1_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_1_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_1_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_1_chconcat", "Outputs", 
                    "Output"]}], "Inception3" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{48, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{48}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{48}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 48, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {48, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 48, 5,
                     5}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 48], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{48, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_2_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_2_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_2_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_2_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_2_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_2_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_2_chconcat", "Outputs", 
                    "Output"]}], "Inception4" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_3_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 288, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 288, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 288, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 288], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 64, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 64, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {35, 35}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 64], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 35, 35}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 96, 3,
                     3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 96, "ChannelGroups" -> 1, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 96], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 96, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_3_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_3_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 288, 
                    "$InputSize" -> {35, 35}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{288, 35, 35}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_3_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{384, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{288, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_3_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_3_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_3_chconcat", "Outputs", 
                    "Output"]}], "Inception5" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_4_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 128, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 128], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_4_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_4_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_4_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_4_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_4_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_4_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_4_chconcat", "Outputs", 
                    "Output"]}], "Inception6" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_5_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_5_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_5_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_5_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_5_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_5_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_5_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_5_chconcat", "Outputs", 
                    "Output"]}], "Inception7" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_6_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{160, 160, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 160, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{160}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{160}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 160, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {160, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 160, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 160, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 160], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{160, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_6_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_6_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_6_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_6_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_6_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_6_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_6_chconcat", "Outputs", 
                    "Output"]}], "Inception8" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_7_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_7_tower_1_conv_4_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_1_conv_4_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_7_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_7_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_7_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "3" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_4_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_7_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_7_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_7_chconcat", "Outputs", 
                    "Output"]}], "Inception9" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_8_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 768, 
                    1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 768, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 768], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    1, 7}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 7}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {3, 3}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    7, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {7, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{3, 3}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {17, 17}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_2_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, 
                    "$SpatialDimensions" -> {17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_2_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 17, 17}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 192, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 192, "ChannelGroups" -> 1, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 192], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_8_tower_1_conv_3_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_8_tower_1_conv_3_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_8_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 768, 
                    "$InputSize" -> {17, 17}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{768, 17, 17}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_8_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{768, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_2_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_3_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_8_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_8_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_8_chconcat", "Outputs", 
                    "Output"]}], "Inception10" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_9_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_9_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "avg_pool_mixed_9_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 1280, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1280,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 1280, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 1280],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1280, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_9_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_9_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_conv2d", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool_mixed_9_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_9_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_9_chconcat", "Outputs", 
                    "Output"]}], "Inception11" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "mixed_10_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 320, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {320, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{448, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 448, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{448}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{448}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 448, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {448, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 448, 
                    3, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 448, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 448], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{448, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_1_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    1, 3}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {1, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 384, "KernelSize" -> {3, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 384, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 384], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 384, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_1_mixed_conv_1_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT]]], "max_pool_mixed_10_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{1, 1}, {1, 1}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_conv2d" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 2048,
                     1, 1}], "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 2048, "ChannelGroups" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False, "$WeightsInputChannels" -> 2048],
                     "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], 
                    "mixed_10_tower_2_conv_batchnorm" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 192, 
                    "Interleaving" -> False, "$SpatialDimensions" -> {8, 8}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "mixed_10_tower_2_conv_relu" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {192, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]]], "ch_concat_mixed_10_chconcat" -> 
                    Association[
                    "Type" -> "Catenate", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> 1], "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{320, 8, 8}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "3" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "4" -> 
                    NeuralNetworks`TensorT[{384, 8, 8}, NeuralNetworks`RealT],
                     "5" -> NeuralNetworks`TensorT[{384, 8, 8}, 
                    NeuralNetworks`RealT], "6" -> 
                    NeuralNetworks`TensorT[{192, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_batchnorm", "Outputs",
                     "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_relu", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", "Inputs",
                     "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_conv2d", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_batchnorm", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_conv2d", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_batchnorm", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "3"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "4"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "5"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_mixed_conv_1_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Inputs", "6"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_2_conv_relu", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "max_pool_mixed_10_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_1_conv_conv2d", "Inputs", 
                    "Input"] -> NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "mixed_10_tower_conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ch_concat_mixed_10_chconcat", "Outputs", 
                    "Output"]}], "global_pool" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {8, 8}, "Stride" -> {1, 1}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Mean, 
                    "Dimensionality" -> 2, "$Channels" -> 2048, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {1, 1}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]]], "flatten" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]]], 
                    "fc1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1008, 2048}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1008}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1008}, "$OutputSize" -> 1008, 
                    "$InputSize" -> 2048, "$InputDimensions" -> {2048}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2048}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1008}, NeuralNetworks`RealT]]], 
                    "part" -> Association[
                    "Type" -> "Part", "Arrays" -> Association[], "Parameters" -> 
                    Association[
                    "Specification" -> NeuralNetworks`ValidatedParameter[
                    Span[1, 1001]]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1008}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]]], 
                    "softmax" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1001}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_1_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_2_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_3_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_conv2d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_batchnorm", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv_4_relu", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Inception11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "global_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "fc1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "fc1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "part", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 299, 299}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {299, 299}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> {0.5, 0.5, 0.5}, 
                    "$Version" -> "12.0.7", "VarianceImage" -> None, 
                    "Interleaving" -> False]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1001}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> {
                    Entity["Concept", "Other::nzvm6"], 
                    Entity["Concept", "VulpesMacrotis::jm64h"], 
                    Skeleton[998], 
                    Entity["Concept", "Dumbbell::qjh33"]}, "Dimensions" -> 
                    1001, "$Version" -> "12.0.7", "InputDepth" -> 1, "$Rank" -> 
                    0]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"299\"", "\"299\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_batchnorm"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"149\"", "\"149\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_1_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"32\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_1_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_2_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"147\"", "\"147\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_2_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_3_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"80\"", 
                    "\"73\"", "\"73\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_3_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_conv2d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_conv2d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_batchnorm\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_batchnorm"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv_4_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"71\"", "\"71\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv_4_relu"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"192\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "23", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"288\"", 
                    "\"35\"", "\"35\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "14", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "32", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"768\"", 
                    "\"17\"", "\"17\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "20", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1280\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Inception11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "29", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Inception11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"global_pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\"", 
                    "\"1\"", "\"1\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "global_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2048\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"fc1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1008\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "fc1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"part\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PartLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1001\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "part"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1001\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.770982507450089*^9},
 CellLabel->
  "Out[1479]=",ExpressionUUID->"2c8ce1f7-8ded-43e3-8f50-4b3b14e83ef8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"img", " ", "=", " ", 
   RowBox[{"Image", "[", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
EBp0Lysztamlfgg/yBcKRBKxTCHVaFR6g9po0Jj0KkQLRjwXwrLc/uUqCpYr
vEH7olVq2b8bHP9rZwJvnve7fub2lVOQ2UUGBYQHBdz3840KC34UGBAc9LCo
oJBIJEslYH8mp2t8QiMcU/JMfLyYiKF1leBbc3BNKf0NSa2lEZ1VcXhMrgjf
ahaQxpSCUbnIIRY4dJoRo2Hc6hh3jAI4Tpfb7pq2uWaBmoXguN3ISBAwsxCc
5+wg4Ex5wJmZ+A0clJ3ZF1KzAJyZKe8JHwFndNQwNWWbdpsVAnI/ppTQXi6n
dQHsgIaVh7dyiXomEttL8ANyCsHIY2n5FAjbNPQeCa6e014k6asS9lT2VmXK
mcNzY465WWT+Drz+iNO1EJxF1CAjm88fotQAMqDRURdQ47Zbx6zml4PjPeKv
FhwkCVIgsslFVpnQLhUa2DQtjQCpjbgPw8NWU2vzevNiMClBJRG3Y66dOLnj
889XvfH+Gz5rVq1Awdmz40sA5+yxvbevX4yOeFRYkNOGbRkmDKHgyJUyLzhm
g/oPAOdfrhywmVHpQHakR1pvNxoRLQOO78XjfldP+10/C3pw91r4Q/+QB34A
TvCDgPv+finJiX09vUKhWKFQGYxWAGfeIrMIicJhDKOnCsChdhUBOz21iQON
6a0lsVUZwVXp4diyDFZPs5lPm9LJ50bs09A2rJZRiwXpeLONWB1um3PKOT4D
crmnARxk0qVnQ0oa3TMeTT8jyAMR4PMcnGf4oAKIFk7y+k2TU38fIyHIeOon
p//66/iTWZtFJ+DTemn9jeTOKu5gk5E3ZOYOa+l9amqflNjHx3XxB3vExCER
YVjGGELBEfRWs9sKZQM14Dhd5WkSGm7aZUVGgubn5+bmwEBmpt1PkYqhxcgA
KV55jWYESEOmJjk8830QapxGPRwjLzgLo/GFx/1VgWNQSwEcpOfNM+5jEvOM
Iq5JwNHRiXLCAL8Xw26rojUWEyoye3KjW1ODy6P9oq/9fOK7DZtXv/3xu298
+sHKLzas37rl630/bEbB8fe9mpIYXVtT0dvfRSQTBCKhWCoBcLRatcGoMRm1
AA7Czr8ZnEXzcV5QWvO8em2Rfi84184cvnXh+J2rp+/duAjghATeCQr0g1Dt
wb27kaEhDfW1Qr5Ao9EZjWaI02z2kad2sY7Tx8XVc3G1/KF6MbEZxO6vpnaW
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
LFlmy5Ilk8BiZmaWzHawdPvBe+v9I2+OT6r6OnFu26/369pLy1GVJrXP7+w9
c2b2BG0tzU1OjQvPSo5ENRRj6gvba/PBqAcUXZeObn8SfDzt+b2i1PCy9PCB
1vyksAugVCNhCxiEGgIqp6suGVueTGoryXsZUpP94va5g4d3+SVEP+7vapdL
+CDjeCed794v/vIz1BsKwHn7Zn41OH9k7PPZmm1FrAZnORlYzbTbAeI3OOYV
cMAAB3r0KeOZeBTNBEEx0g3qNEF/K4BT8eIJgAMyjt+3X2/z99uzZ8/BA/tP
HQ26ceFY5MNgkOXb68vGcb0CBk0p5IOhDTyfBi+2AZcx1J3jtweX/3M4y7eC
rlgI/Vk4BqNGoZTw+Kw/u+Pvy3DeTjvBt9FlVFk1UqtKYtfInFotCLde7zEY
Jk2mKbN52mKZsVrhVxCzNtuc3T7vcIBY6kL8O5z5mY9wQNL5f78ufpjSOxV0
Iwtvpvfa6b0g3bjpXSYi2jrW6ZzoW5CRnTxie3E8C9802lXRVByf9uI2AVv+
ximRUruHOyom+pro/UgipnC0qwwUTtjG7NiwqzQSBlmbD61V8193/MAOKW+i
qjDr3LG9ITfOR4fcvHfpVODOLffuBtfXl09MjNy9dWX3Tn9gJ+LpXTDkGSP1
FGQm3Lx88vTRXQ/vXEyMeSxijfIpg6Tu5s1rEGcObAk+vf/xjRPRIReSI28W
Jj8uTXua8uxyTuytltKXrWWxyWFn28pedJQno0uTh9GV/NFuOqGjIi/l3PF9
9VUlzIlxoYADfkygWgNFGoADXt+9XfizcD779PMvzKr5rgofGfixwrzH9Bsc
Ewxn2g7BcemV0PElMp6RSwZw5MNdAI6wv3mkNg+UaiFnDu73Wx/w/bodWwL2
7t17+NCB86eO3Lt+Nv5ZSFVuSl97A3NkSMZj62QS3+MbUKf54ID4e+GsWNL5
BThgdPO3w3k76wFwwC3IbVLbtDKbWurUKWA4Lp3ur8GBtsstwfk/P8/9PG9x
yCf4+FZOT40CjxT3VIzXpjKbCpnNRTZKt7C3jt/fWJoQUpjwgNxbTeyqZI+2
S5l9BHSpkIxlD7U2Fybq2EP0wVoRub0m71lRWuiTW8cZo5200Z79gRs3foN4
cu9qc21pWW5a8MXjV08fOhO0E8R33645eiQoPT2hsbHy1o2L69YiAJwjBwNJ
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
fGb31y7ZiJSKJrblNGLLdwStDzriH/LwYnFu3JXTe1srsrXcsTc2lY4zMm+R
NhYm96MqelDlmOai+qr03NiHQ+0V5ekxzWWZic/uYxrLm2oK5HzqtENtV7NZ
RNT+jQhM2cueiheCvkIjpRHbXei3BVFUFNXdUdzRmnf74r640KseDXtaz1My
BvtaS2oL4vNSn4HRE3kYNdBd3VJbfO7Y3mP7t27ftGbP1nX3rp8iDrQR+lqq
yrKGcBg6ZUgh5lsMWqfV8sPbd//n1//+xz9+/gd0GPZPcPgQrVbCrQbHJ2UW
XGZLAR+2+9lc49ufBacbWA3cMmIZHOOUXQvgOPUQHJuCDb6fmolB+XAnHV01
WJZeHB4csn9zwMbvQewI2BS0e8fxQ3uvXjzxPOpxSWFGT0/b+DhBwGeBOk0N
LVGzwHBgNSvqtOUTy58dy/wpOMsTjS/AMAfeeqPWyMUSPoNJBXBwg70jYwPg
r9qKqv2zcKa9Nl8spYaPMeu2QnbcUICbj9eid+nVdo3CyqGDsAE4Qg5IOh65
aFItB3YAHChMemAHhgOSDohJt2kK2HFbl5LOUrM1rxfA+QGMjudnoDWf8963
i96ZKfA/JdWqeQtO4Wu3VEDp7mzMz4l9HHX3/LEd3+75HtrbkvDoikNKxSPz
Xtw9pmVgVfR2Iam+qDFl28F1oTHXuXw8j9k/gK1MjLiFay2fN0k8SrZdSidi
aorTozFNhbVlKb3YKlRpCnuovbkktb06rzI3qakiryT3lVbKUgqpSu5wwpNL
pUkPMsPOKkbqh2piyI3xlPGqqopwQn8Jrqc4LupKwPcIPqXPqeWLqITU6JBn
9843l6cWpYbfv7K/JCuMOlSf8yr2zpWzNy+dCNq5advmNTsDvklPiuhEVXWj
64b62lHN1b3YdrmIP+1y/fzuwy/vf/CRWa4GJJ2VFZpvfmAVOMtzjc8OiBVq
fPuzVqyOhtVAfW4tBqjPrd3wWTgq6oBkCENtK+8vTikKu/EwyG/LpvUgArf6
Hdq369TxA7eDLyUlRdfVleDx3QzGmFQmAHWRVqu2Wq0Op9tmd/vgrGjNsTx8
LubnZ/8snE/V+J57wnDgAQ6VNkYaxuMJ/QRSDwpdX16V/2fhTHmsvph2/x4z
LmgLLQxn1mmZtBqgXg06lZ3HBAHggLCLuC6pwKuSTWkUM3q1D8601eyzA+CA
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
o3+OpbIT2Yn0+FQmPTuSnUu/nVnwXcebv6m/d6NTsX9nNFwuhwPvzWZSqWQC
4QDsZnpmbGSse2iks6unvq6hGJJOSVlmdm7S1PTwkZQnt5sPV1dXF79d3/4G
nL/JznejN/8mNd+Co6DmDhwqASfls67FXAkJS1meoMwPClfHzlDTJxujhzMd
B0M1mKFa+KrZmxN87KIQt8LH7wE7AhJWRNmXMOSTdKQcGrADb8ejEYEdNo3E
BDMS824uTsF6fv508eXj5af3p5/fn368Ob485Yt4ZA4Nc8QlQvDpaiiBpMMh
bHbU5E311bm81FmaGCKi1jvry+SLVBJ3/nwr+XzKvJGQpOydw4N57FovbW+M
gZnYX+sh7wxRd0eOmOgLLv5GSLzk4sTkDdrO5P7yABrZM9JagFro21nsw25O
7qNm6MQNEn5dKmHIeAe7q+NNlVndjaUpUf5pkYFbc6OQcVrKskfaKse7qnJj
fevyo2rzwgGC7uokP2c7e0Pd1+ZGqj8ivBxebsyMuFmbADs2xloVeSkrswNN
Vbl+nta+Hi87Ggv3UXO97eXhIR6GBkqmplqe3s5ATfdQd3JOekVzfUtvV3lD
bWJ6anBESGBQgIurk5WlqbmRvrmBro7qU+VHP1oZ6zXXlE2P9M2M9rc3VG0s
zixPj3XUV+SlxkW98/F+bWeo+fyFqYGFjXlUfGRSemJoVEhJWeHI2PDk5Hhz
c2NvTxewQ8YfAD5MKoXHZrFodCmVKCbuc7HythKkpRHywhBjZYSzMUZG9iLb
SxuyowJfmZhqPTLVU7a1MvDzccnPSR4b7sLsrlOIOPlUAjaHx+P9/wIOUMNi
MSgUEolE2N3bXFicmZweGB3v6eyuq64tyMiKBYHjLK/MHp8Ir67Prm/Ov72q
dkfEd+z8vWkCf68q+5vUgMDWhSw6C85I+N1r5v5HJla0PrrbWbZSk7HTUoAf
rKHPQLU2wFoboa2N0tbGeTgUf38X2JFPJKQeKCa4HbGpQA28rITLYJJwBOwu
n01/f3n64ers6kp2eXEM2w83p58/nAE7Fye8YyEDTId2sHUhZmDWZ6b6GuaG
mrrr8jZmenYXp7wcLDpriqf7m6VsLB23IOWgP57Sv1ww/nDJvBDtnwuwIvoG
DT3HJa6CzsTMSynnSsY+E9IEDDRzf4WKXqCg5zbmujEbE0QMUsDeF3DxEhGN
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
hPXliY7t2a65vvKWgogYL2M/WxU/G/3QV2ZlqSF1ebGOpipmOvedbbQeIhAu
9rqpsd6PEAjVe4ixttLcKJ/iOL+ktw6dtYVTfU11JRm9zeWjvU0hvq6az+89
/hFxD4F47WCTnBSbn5f15o1HSUmRn99bBwc75YeIqGDvjLSonNzUjqH2ua3F
6e3FtqnBst7WiNy0jtmR2Ly0wNiQmra6gfH+/JLciPCgV8526upPHz/+AYo0
HY2ngIyqfAzPfUcrg1Bfp+Ks6Kq8uKm+OkU/k7bKgsSQtxb6auZ6qgaaShaG
WrpaygYGGppaKvL7qtoqWgY63iGBuRUl5c311e3NeY313XMzK/uYFRx6Ym25
f3Kiuae9sq6qrbu1uCQ/Pi4yNNDX08XBw9k2JTqst6V+aWNlC72zT8ZTWDTG
IZMjOBQcCY9OpeIj+VRueWOEu1v8x9LTv65W8A8YUQDyXZz5roON4mXv5qzJ
h0MzaCQSMIPD4rbRmE3U7tr0zEhHZ3N+QVZ4RFBKavzAYA+FSlAQquhHDX8L
f3jXyRDAUeg7dgCZO2q+BUeBDOiIzQQBMlImAyTvGAzU0Giy/yzJ166251y6
jIbjY5bIyP7l1oKBnLD6SNeelLfThZEAzkptGoQddHcZgIOeHyRvzJK35tDI
sUP8Nmt/ewc5ccxlsEn7HBKBQSZAEXUmO/7Dp88frt6D/wg5BBmf+vFCdHvK
lRwSpFw8gAP4nIpony7FH66PjkQsqUwoPRZff7xhcNhn1+dfJ9qL+fJBFPDl
Co6PBQIBE6AQcKlyRhj7Ig7pWEQHSXhkPofIZeEP2XgFOCI+HfYBLhp5G8CZ
GWiY6a0aaMhszg/PDndOCbBqyIquzoioyoyI83d6qf/4yY8IIx05CHYWqtEh
rh5OBj7OJkVJ70ZbitOC3YZqcoGXxvLcmqK06sL00tykqCAve0tDa1M9Q111
Gwuj+z8iXhjomJkaenq4paYlhgS/qyhI7W2rGexvHhntHZsbnlydHVmZLmip
7pqfSKsu8YgMLO9ocH7rmpCVNDI9nJgW7+3lpkg3z57dgyLNQFdFQ+W+htJP
Dpb6lobqSRG+mwtDfMr2+kxPb0NBW2Um+2AHqkqf1zautqYvtJ5rKT98+ugH
NbUnGprKWrpqyhrP1XU1HdxfxaQn51SUFNZWlna0NQ8PDS7MTW+uIbc3p1cX
e0YH6lsba5tqCopyM9KTMtMSk+Mi4qNCSnLTB7taVrbWtjGoAwqBwWXxxHyB
YqLIkfDrqAHRHTjyU/pXdv5HznL3t38TnG+bctDpVCIR//V62ubu3vr2zsrE
5GBbeyOAEx0TlpWdOo+c5vJYNzdXiqVDbm+v4Y3AsP4eOHfs3MHynRQcyQX7
8AyTDjpi0H8Dh8E4ZjJP2ewzDgck5TNOhexTLk1CRnNQ84TZnsXm/L7s0CJ/
65YYj7GckLmSmPnS+OWqlN22ItJgLRY5sL84hFsaOsSu7K9M0HaWPh3zcWvz
jH00DYch7WNYFArYzV9++eOnD58loqPLU/6pmHUhPYSEu7s2tTY/BIX64mTX
YHs1i7TLpmDIeNT19fHxiRis9tOXj+eXZ4pKAM5vl1enJ18nmBxJ+DIJ91Qm
kIpYPDZJzKdfnwtvz4THQoaQT+EdErlfZ0kK4aGQAQ/ZdBwet0LZX1me7tqe
79mb78bMtW2M1iz2FlWlh2dHeLlbalrrPrLSe6L9HKH+DKGhDPah/9bdqrwg
7q2rZWlGxExPbWa4d2KAS315Tmzo28RIfx9XWwtDDWtTHX2NZyADbVU1pYew
1dZQfqGnqaOh6u7mXFaUD2mqo7G8raWiobEypySzvKmqe2aosLUmKj8jtao4
u74ssSCzorUmNT89OCoIHCcnO83IUFdHRwUc5/EDhAIcJ2sjYx0lixdqkQFu
FXlJw+2VpZnRxWlhtQUJFdlJVbkp+akxwd6v1YG1Jz9qayjp6qqC46hqKD1X
V1LWVNUzM/Tw947NSEnJzy5paSxpbqjt6eyfm57bXJ3bWBmbnxocH+4f6aut
r8orzMrLz8zLzSjMy2yqr5gY7dvY3ULh9gg0EpPH5kvknUNAUAOIJHJ2FM1v
fzWdr+z8l9R829njH4Cj0LfdbACc/X0seA1Qs76xMDzS09RcW1CYnZQcW15R
hMXtwrHx8aN8AixQ8/79zd2knl/f9D/zojAaeY8sBk0hcBmFvsXn7kkR/IJC
VAqwAwQpqLngcq/4fJBMwDwVMY85ZD5+h749g5/rWWovGiyMKfC1rgpx6kz0
GckKmS6MloPTUkjorcLOdKHGW+mbk/vzA4KD9Rs+5WBlmo5eZx7sEXY3KTg0
lGpfPrz/5fOXj+8/fbj9+G9/+QSJBo523M7S7sYsnDm2l0ZGe2rp+xtTA/Ll
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
4WArZOCF8rExBGBHsT2iE47oJA5ll0tDs4k7DNwqB7ciOFjh7s7SFwfwE23r
rUXDOdEd8X5d8f4jaWEzubHzBQnrbblX+/Pk6RbABz3ShJ3qOEAOHiyOg+mI
aAdXUuH7y7OfP374lz//5Ss1f/jlT1/AUm+uzz5/uLg6E3w4F344519JGbdS
+u0RjbQzyyPv3EqZULmJOXj0xhydTgfHhhrg/e01bM/PTo4kotOvHWLh/CYR
yFtPHEuEl6cy0KlUfHEB/xdciDbyCwiSQ6mMDw8BpfPjwwsZ61hIomGRuJWB
uZ6y/trUOB+LIFdzg2cIK+1H1gbPwt86RAe5xUe+jQ71rqnIMTPRtH1pFB8T
6ubmoK+nCS4ARRQEEOVnDx/8hFBTfqKp8kT12QOgRlvlkYOlgdoTxAv1xw6m
Wt5O5p21+VBNbc0OcBm47fVZyDgtrbVdvS2VDZXZZXkxmUnxeZmlLfWNA52N
fe3RaXF5FQXzG8iU7OT4xBirl2baOupamqrPlR6pKD0w1FdzcbKKC/cL8HK2
MtLQev6Thb5yUoRvTXFKRX5Ca3X+eG/jWE9De20xcqpvsKshISbYxFBTW1tZ
XU1JWeWJmoaytq6Guo6GnpG+nbN9ZHx0bHJ8QlpSWk5GQWVJfUdz+0B322B3
12h/5xiot2u8r3Oyv2tqoHW0u76/tba5vmugZ2ZxTn6JgIwHcBiHTKjZ+ELe
r01Hv4IDgv8X0D8A5/d2o+hn+PfAgRdXXItWzMGBgAPg7O6tb20vQ6kG4ECp
BjFnbHyQc0g/PpFAJa+4+q0IOPCRFHNIFeAAIBAfFGLs794JHsKPgCYuef9b
cL4iI5ecGkCGhjukYrkUrIgJsBDkE9ZoB3JR9oVkHIhF3GSTtpiEDQZumYdf
l1F3pIR1/q588RTyVOdSXV53SnBT+Ju2CK+BpKDJrKgPxAV0b/lKU85GZ8lG
V9n2YAN2ppe4MsU7kN/QAeP7eH3xL3/85Zef//Dh08ePn75c315dXJ58+fn9
xakYwAHH+flKDHZzzicwccvXYsqNhHrKw/MpKC4VRdxdopCJIiEfTmUAjvyE
dnosFgnAdK4uzxXgHEvE58dHCnCuzo6vro5OTuB/ky0UsgAc2bHg+JgnR4lP
OZUwb07ZQvo2aWtiuCmvNPmtlToiwNXMx8n4taVWdIBLfNibmqK0qKA32amR
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
7rYZcUGQfVzsTMMDPObG+zsaK/s6m9/5ev7wI0JfX1lV+ae46JDgQO/gAN/K
ihI/Xx9XV9e0tDSzl+b+wQFhCRFDMyO9UwOlTRUFZSWF5aUJKcmv3Fy9fN7A
wQngFJfk+fq6+791f+VoaWEi77FrY6ZrbaatrvSDkc4DbRUE+E5ilFd1aepg
d+3seCdyqq+zqaKrubKiMNPD2Vrl8U966kq2ZsZG2ho6OnIGTU31oGCDsAOm
89LKDF7Uw+W1k5293UtrRxsHJ1tH91dukSFRhTlFmfnZcSkJYTERwI63v4/D
a0drqCuc7F7aWL318ykszJ+cHMfj9wEccBzuIfv3aHwLzt/E59sh1nfggJEB
NYqJnxBzAJzV1WUkcm56ZgTAGRrunp0bQ2O2Ic9+/HQNjnMkv1L0Gzh384Du
wMFuLWA2kXvrc6jVme3lqc3FiY2F8XXk2NL04MJkPxTLMyNdEwNto73NQ10N
g531TXnpoMbctPrslNrMpJqMxOr0hKq0+JyId/8vcW/93UiWb3sqyU4zyJZl
kkEGyczMLFtmZmZmZmZmZmY7zWynnVSVWVXd9z64D2bevJkf5o+YrYxudb6s
rL6r1+pZb619T4ePQlA3zyf2/kacOBHJcghzsQ2wM/cw1bPXVjNXpRkpSpvQ
5UxV5C0ZSo56TF8b0zhvt7zokPKU2Nqs5N6q4sm2+rHmmu6KwoLYMDdjHUUh
nhckUklBroGOJjbWlxfQ8r4gVZUVo7O2sqy9ueHm4vTp/uZgZxNanp+ZbcqF
GtMD6lJ8c4Ptop11opx1jeVeN+ZEdldkUHhIqKnx39JUXerNdk5OiMZhDvL1
8HSwsqkoKqqvrKyuKuvpbi8qzu3t61hanersaRwY6xie7N4/WT+72d95s7Gx
t3JwCogODk729o52Do93Z2bHB4balxZGMpJC6stS0yI97PVooJX8jCRJIrnp
SCV5mmYF2qYH2tVlBLfkx1SnhdblRndVZoSyrYpSQ1sqsuqKUmIC3CpzE+e7
KovjfFMCnUJdjP0d9K00ZZxM1e2NVCIDnIsyYiqKUsoKUqrLs+Oi/HS0FNVV
pUX5SfJSAn4e9pz7N/OS05LC09Ji3N3tjAFplH9IuJ+3H6u4orCmsaprsNPO
1dbQ3LispgKVhZuXe0BYEI72mfnZBWVFdi4OKDRQpEsryIpIiknKSlHkqC/5
eSTEBOWkJRDG3OzNG6sKBlAt1eaNddXsLAwNtpaHBzjZmWlqMWXwJmVFCUky
r6qiDIMur6GqoKYkq0STpivKajFVjA20afLSykryKirKEIOhZmJi5OnpERUV
ERkXFRUf7R8SAGrAi7oWA1LVUFNWp6PV0tf2C/Zv625f3Vp7c3b09sMjhj2x
NA1xcYfIaZwK6K+wfCdudUNQw5nSebx/+GZ3b39zc2sF2tpeXVyaQkJrbqkB
LzU1VfX1tY2N9XA67A80AMX790/ccw4/dBxosKthsKOxH4y01nW3VHU1VrU3
lHXUV7TUFjdXFTdU5teV5lUVZ1bkZ5TmpZRkp8T7ucf7ecT5smK83aK9XCLZ
zhEejuHujgGOlv4Olr52ZmxLI2cjLStNFWMVOX1FaU0ZcU0ZsracBKpKG21V
vBrqZhfrwypKjKzLTWsrzW0pzqnKTEwL9XMx1laTFJaiiFeUFD4jkfq62lXo
CgK8L/n5XoEXOVkpCVGhttbGN3vbP//0/tefPy4uzCzMTP52tny93D9RnzlU
mZwTbG/PEHdgkvVkXikKkOJ9UHSIailK1Jdmh/l74B9XTkpMT11DjoxwISzM
w5MUG1Wcl12UnxXo5+nv75GRkVBTV1xRlV9enTs1N9DQUrZzsLS8Nv3mZGdj
e+HgaGt1e3FxZfbs8nB2bqyxsXxkoDUpytfGQNlQjSxKIlF5OM8GtaYLeujL
xLjq95bEdRbHlSf65EawOooTptrL2stSGwsTIn3sKHwkpqxwjJ+znYGqvZas
vpyAoaKIg66CobIYg8rnaKKWHR+YEu2zNNHT2VweH+nbXF8cE+HD+4qkpECG
KSBTWZtoGeuoBPm5+no6RIX7RUUFuLPtHZzMG1uqi0pzhicGg8IDLB0sBMkC
NBXFrIIcR5azuw8bEAEcHPOTM1NdPVnGlqZ6JgYaelqiFHESz3NQw4eaRVQA
7MhIijhZG5fkJteWZmUnhuL31BQkTQ40ttblBXs7qClTqBKv5WVFBPhIUuKc
nfH/WFmKqDRFjCZLYaopGehq4N8O4CgoyCsrK2poMExNjR0d7d3d3YBMSGQo
Wjtne+Q02A3E0GaCGiU1ZTVNdSeWc3ZBTvdAz8rm6vkNZ1omUfITF2L+XXC+
u2eNMzPtze7+wfb+wRaQIdhZWJzs629HaVPfUNHQUNfU1NDW1oLyinj8DUj5
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
kty45BjEIQdXRxQUiWlJgWFBvkF+bp4sawcbRzcntq+njaMtja4gRhFH0YIq
Q0FFkSwuLCbEj+iloiCtpSobwHZorswd722syE9orMjsbCxprM7NzYwNC3K3
stBhMhX0NFWZKjQlOYo8VRw5TVVZXltDFVFNUkKUIikmLS0FcJAcgAyEDbqq
sqm5CewG+FhaW8B0AA4cR1lFSYJCJkuKE/hgH/zTw3S2tjYw+InrmMRkM8J6
/gicbyezEZMQjk8OwM7hmx3Yzcrq/OLSzPjEQEdnIxwHgtf09/cip+HDAQt3
OXfuPWvEOW2CGqLgInR49ObgzeH+4cHu/t727s7m9tb65sbaxjq2CW3tbEPo
hza2Nqe2FqY3Fic25iZW50ZXp0eXpoeWJoYXJvvnR4fmJ7CNnuHlSfT0zY30
TY/MzU/Nzk5P48dOjI2ND42ODg+P9A8PD45PDKPFNtEzONiPnsXF+fbezq7+
7pqmuoHRwfrWxvaejsX15YbWxp6hvrrm+vHZya397c9//uXzn778z//3/3n8
+PSvnx/e3x7dnWxe7M5vTnYt9Nct9dfNtJes9FcN12VWpwVmBDsNN+bG+9gm
BTpmRnj42WtbMCU9LNT0lUU05fh0FYWUJZ9LC5JUpF6hFX5O0qCJirwguVnp
BHhYWRupVhfHj/VVudnrlgCQspTUOL/MhEAtugT/15kA+ExwClLa88MzfMwa
krxG6tLLEjwTvEyLYliO2hQ7DTKFRLJUFbXTkGSbKFmoiBjR+NwMZENsNePY
xrFuRqmh7p2VOZOdVf2NJc2lGY3FaWVZMTnJIZGBbpCZgRqKGoBDVyCLCj9j
qstEB7PZTuZUMV5J4ZdRYd7wvqb6so7WmqamiszM+PCIgMioIN8Az8AQXxcP
p4jYsLDocMACRlw8XLFh62QXHhOBzpTMVLSmVmZARlKGIiVHlabJABzUkuJi
Qqh0EL2UZcksB7O8tOiKvKSC9Ijy/KT+zurJYfyb1OTlJLi4WBkba5oaaGmp
K8F3qGQhqqQo2KErysJ3QA3KVTiOnJwMUelASkoKyGNaOprmlmagBi0Agd2o
MVQR0qSkKZJSEgQ+TE1GcGhQeWXZzMzU7u4295Qyhvd3Z9L+Xcc5Ot5HWtvd
24DXLCxOz85NjI71AZzGpqrmlpqBgT5oZWWJeMI1cQbguxtLuXePfnty7+js
nHM97+R0/+h49/ANiqjN3T1oB1/2I83tr8/vbc7srs5sr01uLU1uLI+tz4+v
LU5tL6Nndm8Nr6LF9sTmIvrnVhbmVpZml+dnlhamF2cn52cx+MdmpmaW5rCN
dnF9Fa8SPRt7OxOLc4PjnMfqTS3MtQ/0XtzdYLt/dHhgcgyfs3G4h577T+//
7f/871dPDz/99suvn9/99vnxt093d2c7R+uTt4eLj28W3iz0vN2dOJhq7q9M
ygpxHKrNqM8KbcwJz4t0Sw+zq0j3zYp0zItjRXoahbkb+tgxjegiToYKRnQx
htQrE1UJBpXX0VDFUlPOSks+I8a9MjfcmCGZHuVRkBoU4Wvj52oEypTESF7W
mgN1WShkmrKCmtP92zP9GxI8Ruoyi2I8SuI8YTSKvCQVAZKxHI+TpmSEo3ay
l5mHgVxfaXxzdvB0Q3a6v2WEvVZSiEdzaVZ9YUpmbCDLWj8nIQS5aLS7HtWE
jQlTW11WhSYuzE9CWVFenJ4cH2xtyDRg0NRoEoaaSsE+LnXluX1djd0d9Q0N
ZVkoP4uyTEx1U9IT4Dj+Qd4uLAeWl3t+SQEY8Q7w4RHgFSaLUOWlgU9UfLRP
oC/8CI6jbaBjYGqI2pzMeeY7DRFLQkxQmO8FVYzPVE8tgG0f5uca7O0AleYn
jvQ1Lc0NdXfWenk5aWoqmRlqAxw4FKfSERciZrIp0aRVVRTl5aiSkmQpKUmY
DpCRl5elUCTAkaoqXVtbU19fF1WPmZkJUpyiIg37QLKy0tifeIu5uWlYWAjs
YHl5kbgKc3Cwh+T2d6jhPiuKewfB4eH+zu7G1vbaxiZnndvpmbGpac5NBIhq
rW11wIcABwUOMVGHmCDKvdX695MTuF90cnlzfHF9dH51eHqxf3y2++Zk++Bo
a/8NNn6vvaPT7cuT7cuzzfOjjbPjtZOD1ePDlaO95Tf7S4c7aFeP94mexYPd
ud2Nme2Nlf3t1b1dbru8s724s7G4tbmwvT6/sY6enZPjtcPdmdWVuc1VbAOc
raODufWV2bXl9YPdhc01Yntpe2Ntf+fs/ub2wxPay8f7f/lv//bxT7/8p//8
54d7MHT5+ePd56ezTzf7D4cLlxsjG8N1awOV26N1441ZJ/PtGK7thZFlsR6t
RUGjTUm1WT5Qa0mEr7VybqSTgw7Fy0K5INo9wFZLV4bXSV/Rikl1M1ahCZAi
2IahLANfe43MCDcfey1LLWmmDG+UtxUq/a6KlPXBmrO5jsn6jKWWnM2uvIZE
1mp/VWawQ6K3hbW6uKY4yYFJ9jOnh9lrZgXa4tsLI1yKo9wqEtjZAba5ofZZ
/jYhbLuuuqKOmoKKnAQnM63C9OjM+OAQLwcLA1V3B2N1JUlFGWF1upQWQy7A
xykjJcLRXFdK6IWdmU5mYjjAqShM72ytcbY3Y7lYR0UFWFkbq6kr2DtZ09UU
7BytLKxN/EMC8orzC8uKcgpziytKMvOygBJgYWgzgY+5jYWWvjYCm4cP29DM
CNaDgl9VRRnsCLx+Icj7TF2R6mRj4O9hlxjpU5IT31RTgN+Qn5vY191UVpYT
FuZjYayrzVAGOJKi/MTJARUlOQQ2I0NdujJNXFyUTBYDBXS6EmKbgAAfwAFE
YEdDg2FoqG9qaozaB7wQiQ4tTAp7AjG8xc7OBpU7EgsKECCwt7fz5s0BoCAO
/j8UgRj4IkDb3t5c31heWV2A3cBrJqdGoOGRnq7u5vaOhu6eFlADNjc21rhn
AIh66n+5M+ibC0PcL3pzefNDHV5cc7ePrm652jk92Tk92z073T07R7t3frF3
fob24BK62r84xzbxKrHn5snR1vHJ79ut0+Ptk1Oi5fZvHh2vv9n7oQAXtHEE
eI6Obi+v3r99++XT+z99ef/x8fb+6vbu4t3bq8ebw7O9+aO1kcvN0cP5ztuN
wduNgZvV3pWeormW3PX+UozwlYH8xd6cnYnysabEmkzPqlT38iRWfpRjXqRD
VohdaTwbNX6Yk26oo06AtSbLQDHCTTfaw8CYLpAUYBPpaWKvJxfqZhTialia
7F+RHLDQVVoW7Z7CNtnqKWlJ9ayKdqxN8YO/wGuYoiSWnoy/hUp5oleIg2Z1
akBagG1Fkm9htDvKn4b0YFRAbEOFAHe7UG/nrIQwDUVKdKCHgYaCk5W+loo0
XV5M+DVJlymvpiihrkRWUxTnPJ89M9rPzcbeVNtEi+7nZltfnpufHtvRWOnJ
spOlilAlBbW1VTU16cp0eSmquKaOuq6BZnRsVFZOZl5BrrevF+pxN3fXwOAA
T2+2ta2Vrb0NanNVdRVkJ/yJckOJrghfMNDXhV/AdKQlhOUkhXQYcii1kmIC
ygtT66vzaypymhtLh4c7B4c7kHaiQv0NdRgykiIQ3iLOmQXHMR1EPkhGhgoK
IOBAWAmIIGwILgN2YDdMpjoYATLYGS8RrGF/BDyglJAQ193dCUdAsQNqQARx
ugCGQui7y6DchEZMS/u6ANQMp16Ym5hfmILdwHSmZ0ZaWmvhzpVVRXV1nLSG
PQlkiEUJCOfinov4dsb13553cH33Q32HzN/6zy4JwaQIwbC4wp/Eq/Cvg5Nz
aPfi4ofaOT/fPjsjtHV6yhXQ+KFWD3Y2jw/2L0+Pv64OcPnugdCHzx9R6Ty9
f3j//vbd7fHN0frl7vTNzsTlxtDPJ3NXa91DVQmT9WlbA+Xnc61dBeH91RFN
ed4FMdYTLYlgZ6AysrcsvLs4vLc0srMwvC7NpzM/Ij/csSTKFaaQ4mkW7KAe
6abtbiIf5W4Q4qKX4GeV4G/rZECrSQ9Z6Cw/mGrtK45L9TQdLo09GCjvzPKL
dTOwogvZqIo4akgAnOokH4BTEMWqSQ+qzQgNcdQLstfJCnWpTAlMDbCnC5NM
dVUMGAogRZyfBEmJvFSRE5MlvzbRUwE4KHBoVEEXO4OkGL+mmry8jKiCtBiw
Y8hUjA5k97XVpMQEBfu4KUqLOdqa6Ouo+vi4oQQKDPLR0FQ1NNFlaqlaWJmD
CAIQFTU6hJoCf9o52AIlLx9PMwtThoY6XlVQoolLiMEUMG7J4sJSFDF5GbKY
0EuKyCsjHWUHK73k2MCutqqxkY6urob6+tKGxkoctFsbquKjQuwsjdWV5Yhr
QMhpMB1pqgRViswlRUJCHMInc8EBFwyGmqYmEy3AwZ8wI/Rzvp0shg0gDG8K
CPDD2F5YmIN3EJf+IeLK5g/Z4V6+IW7z5IIzNz8JcGA3YGdyagjgcO49ryoq
Ly8dGhrAztyZBt9Gvu8ch2tGnNMU948/1LcQndzcEzq9fTj7Or3+rzOG7y5u
7gkR/aeXNycX19AxmAJc0M3tD7V/cfnVrS6+OtQ5V0hrfyTO01uvr87u7y7e
Ppw/3GPj9O72/eeffvr155+/fAQ4T/cnT9f79ydL17sTV5vD50vdC90Ftane
Kz0F28PlxzMNHQUhEW6q0+0pPRWhU23JlUkutWnufeXh3UUhM82pTZm+UG2S
x0B5dKavOcqWnACrdH9TtpFMkB0j0JbhrCebFmiXG+1RlOCT6GNdFu/blBPe
lB5UFccer0xcaspkMUUjHbX8zZWLo11j3PSyQx1a8sKbciOyw1zxluqMcGcj
uq2OfFqYR0FCYEoIi22lrSJPlhUXQLGPjdfPSDQpIbqcuKwEv6TIC1BDEX2J
VkOFEh3qUVueCXDqCjNSwv2sDJip0UG1pdkejuaeLjYJkYFBfix/b5e87JT6
mtK+3o7MjGSWu5OsHIWoIHAAJ05qYXzi2I7hqq6uam9v6+Pj5eTkgMiEHhTv
GK4iYqIiIkKiIgIUSVGAIy8tip+kJCNqacz0crPKz04YGWqbmOhrb69taq7u
7mvPy0z2YjnqaarSpMmiQq8BDuwGkpQQ5Tz/+isFMBExMRFRUWGIIkmGqKhi
5GVV6EoMdVU1VTryIaQA00FIkyRLSohLUSS+PmpBxsrKIiMjbWRkiHAc+Aha
4pgPfQcOkeKI6gbpjgBncWl2fmEa4EAAZ3xiCDUOwCmvKKiuKcnPzx0bG8EH
EhM4iYub30U17opV3JcAzvXThx+KSwoHlru3XN3ccnR790jo7v6J0PXNA3R1
fX95dXdxeQudX9xAYOT462T979rDK0TBa6JFxju8QMy7PDi/BB0/FJB5c3V5
cHEOYQPIXD093n54//jp3ec/ffn868fHx6uHmzfvbg7enq1cbI3uz7Zfrfcf
z7UtdxcezzSN16f2lMBK7HcmSmc7M2I9NSpSXHtKQ0fr4gBOW67faE1cYYRN
QahVcYTtVH1Sqodub35wUYhVa24gwEkLtAiyY1qoCYe76Ac76yOndZYkZgQ7
ZYc6pfvZ1CT6tGYGZ3qbMvlINioCWQHW0a66LTkhKX6WtelBeZHuIc5GToZK
jobK9kYq7la6gSxrPzcreTIfp8xXkEIcYihJM5VlMD5xeJcS5eF/QZKReK2q
QJaV5JOXEjDRUy7IikFhHhHkBmqWRnsaynLTYoL9PextTbVdbE0jAj3ZbrYJ
McGRYf5J8RF+vuykxBgLS2MJSRHggEM3DuZGRgY4tgMcDGP0QKjQLS3NbWys
rK0tUYkjMnHSlDSVKoP/o0iQReSkJYz0NYz1GQBZhSauqkRxdTavqy5aXOQs
cNHcVl9RXZKbkRTi78lysrE2M4DXiAn/5RQBRVIMIlwG30iwAwEKLhcgRVlJ
gRDAUVKkyclKgykuXNJUCmD39fVuampYXl5EjQOBHYKab9n59pwAcZsn9iQW
ueWCg7Q2MTk8PNLX198OcGrrympqS3Nzs2dmpkANMc2GOJXNraF+P7mUC879
u48/1MXtA3R595bQ1f0jofuHv+mBWNfv7dPbx3d396DpAbq5vb++ubu6voUu
r24w4E+urn7fntzenN3coD29vj6+uUZL9H8b/L4Vsh8h5MDTq1v8kof3n54+
fb57uv3w+f2Hnx5vgeP5zv3F5s2b+ePVgY2JxneHk2/mWodrU9sKIuoyAhpz
AqtSfIYb4gdqY9uLg7pKw8YakyYak8YbEraGi6cak4BPipfubHPKdF3CUGn4
eFXUYFFwXaqnn5kCbCuObRzsqFkUy/a0VA91MU4Ldon3si6N8+ksiBksS4x1
1nVUEbGQ5Yl3025I8ekpiuwqimrODQtz1ovzsfK10wEy6rJCFEGS2telmxkq
sjzPOFcPpcQFIVQTAjwkBXgPL0mIjyQu/ALUICCZG6qjvkhLCAI1of6OLnZ6
Flr0soz4tMjAjOjgEC9nU20VBYqIlqq8k51pWlJkeIivN9tZVUXBytKEriyP
uIWxCkaQhfT0dIjTVhjDaFFQoMVLqNPhOAQ7sCcJSSlxCTICFYY9TZZibKBp
pKeOwCYpxgOpKFM83e2LizNRVvcPdff0d/S0N7bUV5YX5QT7sZHQYDrExBvk
NIjzOX+NaoT7UMTFpMji0pISMhTO/Dh5aaqinKwyTV5FUQGtgqyMHFUKrxLC
Pngvflh2dubo6DAogIkgVhELCPyeHcJrUAQBrt3d7b+uDj2HtIacRjwht3+g
i5Mw2+qaW2rq6stLS4uB5IcP7z5+fM+95/pbTLgLsn174g7f8kfgcEm5fniC
bt6+I3T7lzt8Hu8en6B74k65p3fEn8RLNw9vr+8fru7uIRBxdnX9+/bynvPq
xR1n9jbai5tb1HVoz67vfqjtg6O9o1MQBJzxM+6ePkC3j+9v3l5//VFX1/Cu
062LN0un2xNvlvu+3Kzd741Nt+eNNmZMtuZgAxppSK9MY3dXRM115nSXhQ/V
xs12ZA5WRbXl+1cnuWb4GwVayrTn+jSlsuqTnKpibMoiLDoLQtJ8TEFBUaRr
cbxHRXJAiItBVXpYmKuJn62OpRo5yds6w9/WWOZVgBk908u8IdWrtyi8tziq
Iy881E7D3VhZjo/kbKyiqSCmpyYnIfhcT4suLPCSUzjLUp49IwnzvaJJS4oJ
8vC/4qyILkXmF+Z/JislrCwr5mitj5K8t726JC/BzkJLVvKVuSG9PDOhODXG
y948xMPR3c5UXV5ClJekRBUz02eCHSd7CzNjHUMDbYa6MlVKXEiQV0hIgDhh
hXoBgxCwILkhpxHVBFIZQRaQgfW4uDgxmJqSFCrGOQ7+cl8vyqjTZWgyYgqy
ojIUAWmKkI6mcmiYHwbe7MLk4srszPhgb0cTfAdlDpCRkRJXkJPi4EOVgLg1
DrfMkRQTBThUCTJaYhukKMnLAR9QQ5ORBkoAiitgjpAZGOhPzMNcW1sBFECD
uGeHiw8XHGL+M3Lazs4WsTo0wPlqOlPTM2Nj44M9ve2NTVXEuWhOmdbeCr6I
5Tq5Sxl8u2Qu99In93QBAQ4x4H8vDP7vGCF0DR7f3t88PhC6fXpL6P79E6G7
d4/4k3gVe17d3d4gVv2uvXm4v3u456wOfH/HWer0b6++/aEOT85RN6Gqur4H
mPh5T+i8vH3AJozx5vb0/vbN9cXWyd7Mm/UROM7l1vBke35LceRgQ9pCX1lb
SUxejBvbQnmmI7e3Mq4pL3iwLqEpN6Ak3qU+w3OgMrIp0ysjwCAvxLgly6Ov
0L8mwbYiyiLXX3ehLbevJLqvLC47yC4/2hXVvYOeXG1WZLibmb0OzUhBONnH
Jo5l6mOsnOppFueiP1OX1Jru25TmF2bHjHHVB1nqlFdOpuoGDDkzPTWgIS4m
yHlgDc8rKVkZHn4BeRlJLaYKSnMMUXmquIqCNNgREXhupq/u52EfG+6dlRIR
6u/MpEtSxZ45WmmVpsdBHjYmTDkJFRkxlq1JsJerg7kB8h7eyM/LWUVHWOi1
AP8rXp5nL56TxESFEXgQiiTIYhBiEooLCFygoEAcQmoighNqDT1dbQsbW7Cj
/PWkNMBB7pLhPBNEEiYIx6HJilua6SYkRmLg9Q50Nnc0ri/NtDfVZCTH+rJd
jPS1YDoUsvDLZyQYFmocblQjcpooZ/VcEQIcUCMmJCguLARnATVfZ2dLgZrv
BOKkpaVsba3z8nJ6erqWlhbABXEl9Dt2CHyIx0Uhp21vbxLgLK/MfzWd6anp
UYDT2dXCmaKG39/XBoKmpiawM1yGmJ9GGM23C+cS2Yy4FY64/Eo8QpRLxw/F
5YXrLBdvUZvfXT7eE7p6eiB0/+n93cd30O2Hp5v3j9fv3kJXnBz3+EPdv30g
dPeVIOBDCFz8ULdv36G9QNn19fzD2RXsCVS+ffpwD7NC5fT4cHJ3vXu8O32w
OnS2Mbw727YyVDXZkVeU6FGS5JUT5VKTFRToqNmYGzLVltteHLE6WNZVGjFQ
HTfTmtaa599R4FeZ6FgabTVRF92c7tKd75XlowGVx7r1l8bUpfl5mygm+1v6
WWvoyL120leMdLfQpwmHOhmmBzg568jlh7g2pQe1ZYWudeQMFEWw9SkWinye
RjQNyed08WcKYi9lxXhRuUhTRHhePZOjycrTFAXFxclUWVVleYaqoq2VqamR
rrmRjrOdRYCPq6mhhpaqrK+7nbuTmbqSpDT5FWSmr8R5KBvb0YShoCDOD3Do
0qLyZH5FKVFJwVd8z0mcZxzISlDIgq9eghcBUPOa9znKB1Dz9dIMFXUESAEv
oImX56UA/2twpKggjyIdu2EDrb6xiZGxqZGJoY62Jk2eippF8DUJAZIs8lJM
6LmE2Gs1uoyDoyXYKasuaWpv6OtsLs7LQFRrrCmLCA1QVpCB3cB3xMWEIJAC
U4OEhQXhfRBZRJgABwSJCPCLCsJkxeE16OGGN/gOegghUoI+hMmkpITW1ub5
+Vni3BqR1r4Dh7jvBnaDnIZQRzz7hgvO5NTI6NhAe0dTVXVxW3s9ce8n9gFr
MBpieifhL9wp0FxwCGrwpVxwHt69/6G4pHynP9r/u3d961xc8yIA/Puf/0cI
X3NuZP2LiBD4l8Vo7k/ff7r/9OXu7ePJ1fXO3fXm4+3mu5uNj7erS8M1S0OV
Y01ZJXGeHfnRpVGebtpysd6mPVVJ3eUxLQWhVanuw3XxG4OFRdG2WcGmCZ7a
JYnOhXEO2TH22TGOxhqCeckeKcHO7ubqRYm+ebGeeTFsZ0MFfQU+BoVkzRTz
tVZF+Z/gZeptrpQWYFWb6lsY6dxdVdBSnO1qoa8qI2FvZmiio8X7AmXLa4gi
KirCzyMhwEOnitMlhJTIr01UZQ0VxVkmjGBnU7aFVkIQKynEQ5cuGciyzEkJ
z04OK85PDglw09KQV1ORcnGx0NWly0gJS4rzCfCRUG7wvCSZGKnr6ypbmGkq
onhXlvbxdHlJwjjn4efB1z7X09SVk5IQFXhNJYuqKspz1m0T5FOUpeJPbYYq
y8k+wJttbqTPeVbb61fyVEl0enu5W1uZebLdDA105KQleF+SeF6QRBD5Xj+X
FOVXpVFgbVCgl0t7Q0VbfXllZWFHR0NjQ7Wvj4e8nJQCTVpQgBciiwtD4mIi
EKzmq9uIQLAhJUU5GWlJYIUWEhHmh/CnmKigrAyFyVDRYKoq0GSQZrEnLBi1
mp6mqp+na0VpwczkyO7W6t722tXl6fnZEXFHJzAhThpwLn0e7b853D3Y397Z
Xt/cWF5dmV9eml1cmB4f7x8d7e3ra+noqGtpqWprq8F2V1cD+IKbcNeSIqZ0
Ek80IPyFu+I0cUX18GAHwlf8c8HhvvGfDg5RN30Lzl/wuT/96cvTv/7Hn3/7
7enTT5cf3x2/u9++P18+2RoZay/YmmpMD7ZtyArd6K8OtGKAnbwY997q5M6K
OPhOc15gepB5hLNaXTo7P8I6L8ymtSgkyEE92sfQy0bFQkcihG3EMlOL8bbO
j/PKjUEWUVQUJrmbKSf4WWWE2OVFubQXRsV7mmQG2xZGu040ZNSn+4e4WuvS
JGiivDQxPi06TUZcBMNVUkTk1TOSAM8LaTFhBYqYIkVIny7jYaEXxrK101bw
s9XPjvT2szNICnLNiPLNjuc8dyM9zt/eXCsymGWkp6KjpSAiRHrFQ1JVlXay
NxPkI5mZaLg6mwsLkpwcjJMTQ1KSQvl4SdGRvnA0If5XiECKcvIhAYH6Wnr4
dghcyEiKAxlpCTEAQqfJghdnO2tfNivQxxPChquDrY25ib+fl4mxvpuro5Oj
LUwQuYuf9zlMhLMmvCCPorQYJC3Ob6KrnhgVVJafjgE5OTnY0lwHcBDtwA7G
P8HFV3HAQVLjCjgQdxwgyxEXSQnEOLmOLAJwGOp0sIMdCHCYKjR1ZTlNNUUX
e8uC3IzRod6N1YXDvc2L8+Oz0zcEOKCGmFrAMaM3nLG9v7e1vbW2sb60sjy3
tDizMD81NTWEn9rf3wpwWlurAU53dyPAQaIDONxJocSUTvBCYEj4GrFYAUEo
AQ70TwfnO3b+ieD8kJ2L65N3Hx9++fXD589v370/f7zfvzlfPt2bXBpvrC+I
vNsfm+8uXuoptWeI+5op16cF9ddlxflYNeZHxnuZwyZsGKI5ITZVSexQe2ai
p3F1un8s29TPXltBmMSU4wtwNTaii0V4mMN0SlOCGJTnKHCYUs8c9GSKYtlh
znpBdszMYLuKJG8oO9Q+xt3AkilPE3phwpAXIpF4SSQZspAsWVTo1QsMQBHe
lwpUcYa8lJwID1NW1NGA4WyonhnmHupiwjZnZkV4+djpu5kxbfSVIn0dvV1M
Q3wcTfSUo0M95KT5HWz1JMkvmxtLAv1dkxJCIsO9YqP9/H0dhgYa+3pqe7vr
oiK8W5rKvNmOKYlRyfExoYEB/t4+elraoEZfi2lpYijCzyslLgLHATi6Guo0
aYoshYxWQ1UZrwKczJTEusqygvxsH28PL0+Wi7O9i6ONvg5TlkqG6VDJQmCH
IsKrQBWVlRBEa2WsHernXltbijG5tDSFDQd7Kw2mCoo4sjjnShCETAhwyOKi
EModiK5M09JUBztghACHc52UIg6BHWmqhLKSvKqKIsCRl6PCd3Q1VCCwY2Gs
m5mW2NfdtjA78WZ/6/SEYy7EeQBCBDgENbs7G5sbK2urC6Bmfm5ybnZidnZ0
YmJgYKAN4IAaCPiAHWIGKXfpQqKuAUr4QI6/HO4TIs42wJ729reg/YPtt8TK
a7/TPwoO8a7fc/dH4PyR/s7Jih+y8+HT+y+//vTrbz99/Hj/9HT+4enk3f3u
3dlyQ2n86lh9U1FkV0VCZqi9LVM8yce8vyxhuKkgO4pdnxeTE+VuoiSoyE/K
j3QZqkx21ZEJsdcNsNVJ9XcyVZWSfEGSEyS5mutYalD1FYXjfG2tNKWdDGjh
LONwlmFhvKeTrgzejqonN9ypKSeUZSjnZ6WCzKYjJyxCIrGtdPWUpVCDyJEF
kc0oQq+VZCSoIvwKFBEjDSUbPVVbXWVHfVUXI4avjU6Cr31BrG802yoxwNHd
QjMr1jct0tPf1TTC3yk+gh3q7zw20JSZFt5Yl19VngE6lhdHE+IC01LClxeH
NtcnZqd7tjenZqa6mxqKx0c7pyf6O9saPVydXpBIKL1BjRfLBWgI8r4EKcry
nAfdCPPx4E9EOGzDhhRkpBh0RXdnh+y05Pa2pvq6quKiPA93F0c7S1cnWytz
I0Q1mjRZSlyQLPhSSvQ1qEFm01FXMDfQiIoKGh7u3txcbGystDA3UlSQoUqJ
KynKfgcO57wEWQJSoSsAHCKMwZiAD+fkG0UcBgTfgemgEy9BAAdYGWirm+hr
wnfMDLWz0pN6OlsmxwYPdjcQljiR7GtF8+0g39vdBDVbm6vra0sIaaBmdmZ8
emoU4IyN9cFxgEx7ey2oqasr6elpwnuRxIi5NNx5O0StxBVhakAM7Ozsbnyd
BL35zwXn9+z8s8D51ne+xefjT59+/vKZ8xwTzmI+p+/fnr6/P3i4WL3cnxzp
KLjeGxluzMwIsa3PDBytT18frGSZM2a6q4abCg0VRXRl+By1ZDqLEnwtGIE2
OlGuZjpUAVd9NZrASyZFlEERVyWL2BsoGNBFc2O8DJREQlyNnY0w4OUtGBJJ
ATYp/jaBdprlSb6p/lYteeFRbvqO2hRhEklZ9Hkoy0KKj6QgxmOjzzDRomsp
S+uoyWkqUekUIVMmLcDF3NlYzVxdGqVNpJupu7GK7GtSVrg7oB5vK+2qylwa
bR1uL99aHFicaF+Z7T3end3fnNzbmKguTW2oKSgvTm9vKQ3wdUhLDspMCx0f
aW5uyG9rLpqe6FyeH54e76mpyHd3tlVVlIPF6DDVAAUKHBN9HWwDHMQ2vpfP
UNdQxIThOIhtqIMkRAQJJ4JRwXQqK0pQ5liYGjjYWjg7WFMlRUENnUZVliVL
CvOgxjHQpIMaXYaiq5N1e0vt7NRwSWGWtgYdWRE7oziSEBUiJCkmLCkmShEX
I6QgJ8VQVdTWUFWj07AbISkJEWRCsqgAMiFa9KgoyUGK8lR9LTWAo6GqYGmi
l5OZ0t3RPDbct72xDEAgAhkuNZxZnVtrBDUry/NIaKBmanJkYnwIebK/vx0W
09RUAXBQ5pSX56LMwbuuOddGbrn3+xDXN4lposQzdrl4cmYjbK9t76xDjx8+
/lD/KDjEu75jB/ojcP4I2L8Pzg/YueFcdb2+vkbovbo6erw7erjavnizsL8+
9HS+dLs/cbbeN9iQdjjb4mYkO92amxnj1VeXa6pOSQt11acJxbItUwMc/a20
olxNWfqqGhJ8tgxlAwVpJkXcXF2VQaG4matFelmyLZlAxs1UFb7DtlS30aKm
BtsHOmoHO2gH2Gp4miulB9r0lif0VyaNNBdVZ0UONBRWZkaVpkeFezp42BoW
pER4O5r6OpuDGlN1GS8bXTM1qracQISHRXYYa7gud6azYqSx4GprYnuq4+Fw
4cPZ2s3B3NX+/Mfrnf210eGu6uWp7qnh5s6GwtLCVDMjRlQ4O8jfKTjAcXSo
MTqCpSjPn5rk39tV2dxQOD7cPtTXPDbUmZkSh8M1AKGSRUEEwhjcR0VBDsUO
SAE+CG9kYQHsIC7ED/cBZcAKB38jQ10irfl6sdgsJ5aLPUYyZ6a0shx4kacI
gx09ppKDpSHYcbA1a6gtmxjta2uuYbMctJjKAIfz0B+KGFVCTIoMZEQAjoSo
CFlEGA4IQJQVZJAAdTTVlGjS4AgCOJCEmCDAgR3SZCl4VU+boaGurMOkQ2pK
snCc1KTY9pZ6gLO2PIckBkbgAt8GKmyjn6BmcWGGoGZ8bHBsdGBwsLO1lcNL
dXUh7Ab4FBSkDQ62E1NGUdoQ14CIJUHQci+kcmso4os2t1YJ/XPB+T07/yg4
f/S9P2QHenj74e7+3cXF1fHR4cX50YfH85+eTt/d7tyfL3+8XgM4W1PN6+N1
B3Nt052FdVlBS+PNmzOdLeUpQ815MV4WaYEOvRWp+VGe8WwrW4a0LVPO18LA
zVhHRUzIUV/XXldbXYonlGWWFsYK97BIDnFWlXge5GzoaqKiK8/HlHrhZaU2
21HcWhA9WJOO+ig10Bq5KzuCPdRYMNNVszbWvj3dtzTSvj7ZszHVuzXTP9xc
1laWPtZWPtpSDNfbn+nZmWo7Xxu62hz9T+8O358sX2yMHSz2PR4tfbjc2Fvs
35zpWR5vJ9RQnpYQ4gbHiYnwcXc1Y7mYUiVfursaubnoTY43BgXY+HhaBPk7
lBYlD/c3L8wMZqVF21oaABngABnpalmZGtlamGqq0YEM73MSkEFIg+kgsAEu
tGAK4CAmGRvpeXu5x8eEB/l7QcYG2qICr2QpotpqNIQ0cYEXsB4bU107c31/
H9fqivzOttqu9rrwEF9DPaaKkgxGPgTcZChksAPfERPiFxF4LczPy0l9shQT
Qx1zE338NPgOJCMlLi8jiRbsQOixNDO0tzHHPtoMZRUFac5XM5SDA7xrq0rH
R/pXl2bXVhfBCLITse4T9/Hr6F9dQWmDkDaFhAavGR3pHxnu6+xsrK4urqkp
KinJam6ubGgoy85OHB7uBCDEBE7igVPEFSLCbojpB6hrNjfXt7c3sc35/I1l
aH1z5f8ncLjs/BPB+X1gg96+/enq8n5rc29xfmFrfen28vDj0/nPT8e3p0s7
i72nWyOPx7OzfeV1eeErI9Xbk82zo3VvzxbPdkfWp5uPlruWBytnu0u7yxLL
Ev0inI0DbHQ9TbWsGAoGClRvG1NbbaaBspiLiaqbmXqUl3VtXnRPbdbyUMP+
XM90V1lHWdLSQNV4a36ij2WEq0FpoifAifXhLCCQE+3VVZnRX5+3MdF5fzD/
7mj14/n649HKwUL/8nDT/lzvw8H8/f7c2crI7e7k9dbYr7dbbw9nYTd7s93X
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
hAifMC8JCc1QSwXUSAi9EnxFsjPX9XK1zs+IG+5paqsvdXe0pMtJGGmrujta
a6kqSInySwq/lhTipwgLSAjyCbwgIeMRz9Q202fCsLxcbS2NtJjKMiiagKGa
ghTYtDDULMlNrSzK8nCyIsABayhzjPS1IsMCG+sqCXAQyWAB8AIMb7R/yVRf
qQFTC/PTyGk93W0N9VVVlSWgBmmtrCwnNTUa7MTFhSQnR05NDXBnBRDT24Ah
Wk4k+/ppKytL4GVhYW5ubmZmZgrigvN7a/i2Nvm9/v7ctn+Wvp1ffcl91NNf
dUE88+krPl8fTXwLF52ZHj892vv5491P76/ePZxcHK0+Xu398v7i9njj3dX+
w8nml/uzL3enZyfzl+dLJ4cTN6czB2vdD0cTm5P1nRUxwY6MQHu1lADzECfN
KLZRQ17Y5mTT+9P54fby2cFGgPDpeudf3p8+HK9cbk2+WRq8O5jdnuk8mEe1
MjfXw1n7ujjRd6arrDw/aaS7ZqqvoSQ9PDvOZ6S16GxtqK00sTjJrzYnaqy9
ZLKnqjgtrCAlrLIgMdzX2cZUVYH62lhHLsTXviQ3trEqKz6C7eNiYW+uFe7r
6u9hJyf+mqkgaWXAdDTX1VGRFXjGua7K/4zk4WAZ5OWUlxYd7u+SFu8fE8py
sdUN9XOwM9NEj7WxRnJ0gIuNIajhPCZaRBAhDS2KHTpNFuzYWpgqyUmjxgE7
cB8ip2FnFbqCs5OdBlMVmc3O2szYQJssKmCgq8F2tdfVUOH/OvIR2KREX6PS
kacIsxzMfN3tspIja0qzs1OibM10GErSbvbmvu4OlkY6dDmKhBCv0KvnkDDP
CwiOKfKahLfDsxytjLCnlbG2LkMR7Hy9I0kcn6+voZwUHZyfkeDn4aippgjn
gk9xnEhTLcjfq6ayZGy4D1yAHRgBRjgxyLENR0B1Q2h2ZmJ0pL+rswXgVFYU
NzZWQnl5KbGxweHhvt7ezmAHjkPcvIN4RkwKhb9A2MCnER84Pz/LWaZpenJq
amJycnxxbYHQ74n4yyzob+aGfas/Auqfq2+p4TJCiEsNAdEjfvnN1e7Oxt7u
xqf3d//6p4+/fX7405eHn99dvL3c//nx/P31my+Pl3cnO58frv789HB5vv3x
6fzj2zc3pysbC903h9NnG4OL/eWrg5Xx3ib+tmoJPmab4/W/3qz+6W5zd7q1
v7n0dGvm8/2bLw9HJxsThysjCGPrUx2PR0vz/XXn66OzPVUb4639dTmjLQUd
5cn1lbn494kIcNWic6oLf0eDocb8gfrcpEDHcHezhECHie7KivyE9vqi/PQY
BwtddSUxIRzGdRVS4gKKcuIKsmJ83K3c7Iy93KzYThbONkZqNAmQQuZ/EeLj
AlgEnj2XFhFFj4YizcpQK9TXNSMhNCnKd6irNjc1wt/DBvJzt0ZnQUasvbku
HMfK1EhBBrU9H/+r5xDYAThgAp3Ib+hHD1HyACUlRTkgw1Cno9JhqikR54RV
leUjgn2RrFDaYMzDa+AacBZ7C4OoEDYyYVJMQFlBSlVxZniAu4Gmkq2ZHl6y
M9c30lZXlCaLC3C8SYT3JXyHIsJLXEUFJg6WhnAcJ2tjWBg4UpGXRPUEKtGi
gMLbQRBSHEIaZyUQcUE4oK8Xq6w4b7Cvc2pyFGhgVMMRuDkK1jA5MYKXpqfG
sDE02IMCh3CcqqqisrK8+PhQf3+Wq6u1ubluZKQ/ahyitOGs6bG+Cn8heCE2
vvUagpqJibGZ5RlodmWWO3flOy7+CJx/FKh/9HO+jWTfpjLiVACyGcEOXiJ+
9tsHhNTTk+P9u7uz3748ffn57uZi92h/+eZs+8P96cf70y9PNxcHmx9vLt5d
nr89Pf386en94/V//POn//lffvvzx+ubg4XzjfGjpQG4Rv7XlQGWeiseD6fv
9ybeHkydrgzMD7c+nKxDR+uTswMNYOdobWRnvveny03UO28P5/fneupyo5cG
61tLEuL9bOqq8ssL0sIC3DzsjbWVxAJcjcszQkuSA71ttKqyI5ZGm+uLk2Er
GGmeLlZqCpLios9QvMvLCjraGro6mznZGdla6uIwLi3JjzJcgy6L8YkD+2sS
SVqUz9XGXFWGpqmoIv6aT1pE2ICpwna0isfx09UqJsTDl2VVmBmjx5APYNt7
u1r7smw9nS0ZdEWzr+eINdXo4IK4ZAPTsTA2QIs/CSHIEe4DXkJDAuztrMAO
XVFWBvWJAA8ykoO1aXRYADIYhjfGNlwDEHGcxcOW7WKRmRzeUlfU21aTFh/K
VKaqyJNhImDH3sJIR12JJiUG30FUk5cUh6fg7VQxPvynIdeFB7DZztYGmnT8
ZyKk4VUYliqNgswG4T9cQUYCIY1YoRrgsFlO+TnpXe1Nw0N9Y6ODnGcRzs0A
GQIcaGJ8GMhAeJUocKqrSktL8rOzk1NSYmA0Dg5m+vr4b5MODfWemxvh3rkD
UoAJSOQ8ivqrsM2lhrMq4NjI6Ojw+Nw4oW8j0HcQ/W8B52+zN//XWub4/OLk
4pJghwsO9j882D49OXh8e/Prrx9+/fx4eb4z2NuYnhxenJOEf8fJoa7pIfxv
1fbiwtPl1S9P764uLjdX13bW1tbnZ+7PDj5cHn4631sbaeurzq5IDWnJj7lY
GbzcGHk6XLjZmjyc6z3bnv1wtQtwDlbG3qyNfbja5tQvPTULA/WlqSGLQ/UI
bF2V6cNNBRPtpb01WdER/ubGGjSqoLYq1UyX5mWvG+ZhZqklXZjkH+xm3FqR
Fsiy5ISrhJDC3CQleQkx8Zfioi/l5EWsLXX9/FyCAtxCgz3cXaxZLtYoK4x0
cdTn3CsqSxYV439poqNpqKYtLSRG5hWQERY11mAEsJx9XW2C2I7ZieFKUkLW
hkwbIw0dFZlIf3dvZysJvhdRoUG+bBZgQYHD9/IZ6EBmA0egBtkM26AGLewG
lQ5NmiIk+FpZibO4k7mZkaI8VUVJjnOjkIyksrxUeJCPqR6DGM/IbHANWAbA
gePAbhqq8nDECPZxwdHASJsO00EJ42pnoa2mqEAVR7FDEeEDQaCDCHtwHGcb
kyBvV1c7My1VefTAjAAjrEePqQQP0lFXwBdx1jn8KnmquBZTxd3VISs9qbmh
uqe7faC/e2RkCCGK6zsQseosHGd0ZKC7q7WutqKwIDsrMyU6OjgoyMvSUt/A
gEGjSZDJfEFB7MXFcVBD3CgKUhDJCIEXwMLlBd8yNDQwONg/MNA3ODE4NDkE
fZd8vsXnH9K/C8I/pG8TGkiBjs7OCXYIcIhv5Jys4Dwz+uzh4QKO83B39OkD
/GdruL+5v6OuNC+tojAzOzkhNToyIy5+bWb2T+9/QijubuvZXt843tk5WFup
K8ye72u72Z6fbKtY6K2daC46WxocqM2535152Ju7WBu73Fu42l98szYx2Fq+
NNZ2ujV1f7S8PtVVkOBfmRmBSmd1rLkqM3ymu7I6K0JekMTHw7l7RUNNBkWK
jbGavoqEu7WGvYGCt522l412lL9dT3NJZWFKXXkuTU5UUpxPSOiZhMRrtLKy
InZ2Rmy2XViwl5mxlrmJroEuw8xQm1OS871ytrPiIZGUpCn2RpbCz17LipCp
gsIywsJm2kx1OUpMkGdZTpKVAQMFkTJV2NXayM/NNtKPzaRRRfh5NVSVYShg
B8EMDCKVIbwBHAikABmwg06UQpwTBdKSxGKeigqyhnqajnaWYAfUYdzCcVDR
w3FoUiICL0lAgOXw/1X31l91bOm7LxHc3d0tQAIJEpzggSAJFjQEDQRLIEiC
BIK7u7u7uzuRvVvOd9wzzv3h3j/jPrXm7tXrILt799ndd3/HeMbMrLdqFQsy
P/W871y1Zhk/czTz93Iq+ZJWXZqdk56AVI1MmAd6P3sd8MLR2hRljjAPG7I1
QS4WKWFe9ttMSNVABAAEhsjTTPS14DKIgETgA9MBUwb3VAAOlRPysInwc8Ju
UOmgxnGwtYwKD8n+lFpc9AXsYDDDdAg4yK8w/gdpizkDHzhOcVFeetr7mDfh
oa8CPD2dHR2tdHSU1dRkQA07O5Onp2NfXwspbSjiaE8FBYYQOjAXao3Zuhr8
iKqqioqKsvLy0rKyksqGSqiqsWpxe+taTa0sQ9OrK7Pra3Mb6wtbmwguUd/Z
3CUfpmBskwwKgxlDml590L3gl4F9fLR5dLh+sL+6t7u0vbWwuUGW3UB7rVZ3
D5a39xY2tufWNmkPEdxc3timFj3Y2qZ8Z3FhZm4WWlxe2tja3Nnb7epuOzzY
OT3ZH+ptnxvv314cXxzvXhnrpB7T1lU9O9DgbK4T6e8qzM5kfE/BVE85Pz2u
6FNiT0PJaGdtR00BNlNjQ8o/p0z0NPi6WEnw3H77yqu9On9xtPNkY2ZhpGNp
qPl4eeRiY7KpKH11tG2goXC6u2a0tayjIrskIzYlwqexMK0yO/Hd6xeBrhZ+
To+tDO/pa8gpSvL7ujk625u7OFgbG+k/NNDVuadu/8QiMizQx93Zx93ey/WJ
o8VDjHNBttt8zFS9b/5Q56WHs42JfnQo9W9sVPCrwBdhIT76uqoYt9oa8neY
mFSVJKVFRRWkpHjY2LhYWOSlxAx0tTACURGE+D7zdbcX4bklKcgiLXQnzN/5
47vQJ4+p+1qkxYRJhoZMTFyIH4xwsd71dHW2fGwEUsjNNiALxQ72CnBwKElJ
aSgoqMvLC3JyIofSUlKSERGREBAwe/jQ5vFjOTExMT4+SUFBaWFhUwMD68f3
bc0NAr1dPmck5n9Oiwrz11STvaepEOT/wsHWXE1VQYCfi4uThY+XQ1iEX0xc
CJWOMDeHnJiwkpS4lpK8rZnJ0ydWBtoaChKiYnzcAhysorxc2KsoKYYIOhK8
3JJ8PDJCAipSEjjMydoiwO9FTNTr9IzkzKy0vKLPZdUlda21Ld3NbQPtHUOd
rV3N7T2tTa11JaX5nzJTk9/HR0e9DgzwgRwdbHTua4rLiPKJ8vKI8XqH+tZ0
1I0szDT3d5eAsvpq0kJlTXUpnzPzq8sR+VxenFmcn11a+LEwD8H07MzPhfml
1ZW0hQSv0fjiAm29wSX0ZzDON9bnNzeAD326+NJHKoxuRZAhUw3ghazmRJCZ
WV2ZWl6aXFoEO9eKLOk2tbQ6sbA8Nb80vbA8u7Q6v0KdH5AygrO+uYEKBxyf
HO+NDvXOTQ7/fLZzsrWAWr6nrrAo7U3px7dZSaFJ4V6psUFIkPTVpJ7ZGH6I
Ca7I/dBZWwg6mspyBlsrQU1mUkRz+efcDzHezhYuVg9bKnK764uBUm3hRyDz
0+7cfH/D+ngHtDzcUvclpaXkY3bCq9q85JzEUBCEPgh6H+YV5eukJMEHHAK9
nsLw/Lxc7qkrGj66z8Z6++4dJpTYft5uof5eGe/fpCVGvvZzU5UW5KKt+q4h
L/H65XN9TSU3e8sgHzckOZ7P7HyeO7PdZXJ7aqOsIA4jE+BlkRLnAzLsd+4I
8fCw3b4tIcxv8vC+uACX6cN7qHT8PBykhFglBJhFeZjsze9Fh7j5uVvaWZmT
jzuRpIERGBAgEhPk09fRsrU0M3n4ABXQfW0NRJCwIXnDmQGFhJAQYBHh45MX
F5cUFhbi4pIVF7c1M3Oxt9dVU1OUllaUlJQSETHU1Q32fQZqUNqk4jcK9n5i
aagoJ2pl/vDtm9dk2RAebjZuLlZBAW4BQR4eXgoZgIN6B+5p9vBBoJenj5vL
A001dXkZWVEhxCF0VGWlcIAI3hIfj7QAn4KYiJaCnPF9HWc7a3/f5+FhwVHR
r+MT3qR+SvlSnFtRX97QXt/c29La39bYVt/S3lBdV56bl5mW+i4lOSE+Ljoy
4lVwkB8BR1pBUlxOTEJJ8tXb1y0DbcPz0019XUVUjlKWW1ECRj4VfckpK0rK
TM8qKUAkoyAXvEDvsz/GZ3yI+/A+LetTTnEBbR3O60Uch1BDHAdirDvodkM9
hnlpmYhejJB6ZBEv3Nqc31hnpGZiceEmxyHIjM0tDtNW4iVrdIAgnHN2cWl2
fg7UzC3Mr6ytbu1s7x3sn58d/uXnr2HBfj9Ody8O1nqbK6d7G8bayntqPo80
F/XXF8T4u/g6m0Pa8sKWBurpcaEB7rZhvi7wncKPCcnRgYAl1NsZdlOa/R79
hxoyCWG+NQUZXXVF/+//ON+fH9iZ6d2a6sY5FwebqnKSoK6qz6lRfhHeDl+S
I6DMuOCyT3GwG7tHag7mBn5uduGBz5/ZWXh5OCrKiGHwyMlK4JL7SF/nhYdz
bHhwbLh/akKE11NrGSEOfhYmKX5OYz2NlLcR4QFer3w9UuIjUYPf05AHMkYG
Wi6Oltwct/i47/LzMAMctrt3INgNMjdBHo6HetoPtFTAGtKkj8kx3s+sZUU5
HmhIGunKRwa5Br54Qm65IfcMEGfhYL4NdlDRqCnKkTulYUkAB1hBUmLCVPJG
u/lTVlIML+HhYIVDiQryGenrWZmZIMGjbnjm4+blZIOdBXg7UwsjhPunv4v2
feGkp60gxMd6/56yi5ONwX1NDH1WViZ2tju8POwgiIP9rrgQnzAfFyQpIqCp
omBh8ujxowewTlUFGUhWQkSIFwUXt5ykqJSoIC8HiwSxGxlJfS11G3MTL3eX
0OCXUZGh4REhYCcmIfp9WlJWfmZpTUldRz3Aae1obG6rr6gugd2guklMiImP
jUR25+PtYWFurKKuICknLqMsraSpGJkYBZMamJmo724HNUAmNS874WMq6AA1
b9OSQQoiiZ/SopMT36QkxXx4F5EUF5kUl5CWkpaXPTg9da0GpibRDs1Mj8zN
js7PEQOC6IBQw5immYVFaGJmdnJ2Dpqam5+eXyBB7CWJGZCZRu73N2rI6oLX
anx+aXR2YWhqdmBienBscnhiGviMz8yTJd+nZqbBzvLqCqg5Ojk+uzj/n//1
08n+Zqj/85WZof3V6f7m8pGW0s7y7JL06LQoH5Tw1I3KcUEAR16Y9YWjmf1j
XQ0ZAetHmlEB7lnvIt9F+gd52r98ZhPywjHczzUu1BsQ6SqJIWGD6SyNdW1P
96yMtDYXZ7SXZ7WWfuqszPmc9BoWkxUfgvTsY2xgRkwAIujDiYrTY+AjL93t
Xe1M7cweSYhwiwpwSUmK3GJiEhXhR37u7GAVF/nKycb4bbj/U2sjTXlRFUlh
eRE+S0M9n2cOyNaKc9JRVuPXQZqnriwVEvDczFhPTJhLTVkKqZq6ijQHC7O8
tNRdJiY4CD8Xm5ggr4PV4/Ag38gQX9RNwT4ucBxNBcGnNgbhAa5eLuYeLk4w
FJKeAR8yP4CUDGMeqRpacps0aAJZVNUjLS4jIUqtu87HraggI8jLxcnBws3O
IiLMr6ulrv9AR0SAl431Dh8XOx8vp5qS/ItnNgAnKeZV0efU+JgQJ7vHSnKi
kKyUsKQYv6AgJw8PCycHM5AhQtqJty0iyCNEe/ob6KC+g8BLLVqio6GCKgZk
cbACbXYcgxaZm7SwgKainJmRAagBAsAh9UMSuEhJS4pNfBMdFxmfEgd2yhsr
YDrtSNU6mmpqy7Oz0pMSY2OjwwCar5c77EZPV1MC9inGD9MBOGFx4fWdDR0j
A5WtjbAYMAJkIt/Fg47Y1PeABSKdoDcRwTGR4YlvQ+PehCXEvk19/yE3C2hc
q76J8f7JCeCD/vDsDNgZW5gHPoQLugggBJxr2RmfnSUam5mBRqeniYYmJq4V
eOkfn+oZGe8aGu0eGO4dGu0fGR8YnRgcHRsen5icnlpYWtzc3jo+Pfn+048/
/eXP58dbKG3mx3s760vXp/tn+hp7avKai1Ljg1x8bB+mhL/oqsjJT4lMiw7Q
kuEHPhpyImzU49gk3exMM9+/eRcdHOLtYvv4PmoTFB1wAWVJfmNdlbev/YY6
6oY764eailHaIElDaQM0YC5gBNSAkWg/5/r8D4ikv/FHzhbibv028Fm4v0ds
qK+Pmx0ch4fjlgA3Kz8fJ8DBJReFtqOdBRznOfXBZZC/h8NDLQUlcUE9FbkP
cZHB3m4oi/w9n/q4OxZ9Tn/0QAPDDwmbrpYi610mLnYmslAGJyuLnJQkdfsZ
HzcH8y3W20z6OupuzrYudubv3762M9eXF6ee8vPCxdLd0dTL1crD1dnI4L6E
iCDrHSbmW0xcbMyUm/DzoHNPQ1VJThogQBxgivk2zEVElF9eTlJRSQa1CbIx
lCfsHHcx8rl52BTkpTQ0lWGdzCzUYiDCInwoYTxdrAJ9nkaEvPiQGP4q0POp
g5metpKirAhgFxfhRjkE0xEQ4AA+OBV1Nra7+NFADzCKiwkpytLWH+DhBJha
asqaGip4M0hrcQw/HxfwBM4wR00VRTtri4jQ4MxPaSXF+RWVJU0t9ZXVZdlf
slIykt9nvE/P+5hfWVjeWFlXX9XYVFtTW5GXm5X8PuFNxGs/L8+n9k/glepq
SnBTQWE+KXlJeTX54OhXlc3VsBvkaahf3mVlgJGQ2CjQAX8BJgFRYa/eRkMv
QgK8Q4Nex8dAATERgCs+Mw10XKvu0ZGesdHe8TFGfOA+GMDQ0Ng4hvHIxOTo
5NQY7QmL2CRiDMIjhicn6RqZmqKrb2TkWt0EDs4JMFHjoLQ5ODq8+Pb15z//
6a//9T8W4Y1DHZ9T4+aH2+cHW1C2DzcV9tXmJgU/C3Q2ifZ1gN68fIrq45mV
gbOZnr6WPNdtJjU5YWsjnXcxIVnJMakJ4UiunKwNUdTrqErJi3LLiHA+d7Js
ri5ory1GkoZ8b7y9AnaDSge8FHyIQp4W4GIO6SsJu5jpIElDBNYTF+QGcACj
+SNtfrZbGKgY4YQacTFBU2MDpP1BPh4xYS8BDth8oC7Lc4fJ3vTRk8cGtSV5
Ho7W1sYPYpHnudjaWDx67mYfHxMK64HXSEvwGxpoQYK8PEjVYAQYeIjjiq2l
Kh/xyj/Ay9XD2QZeJiHAynmHCb+mp7N5ZPALk0f6GJBItKg7k9mY8ULyWoxJ
MSF+BNFBSgbBaKj7/+ECkiJgR0iQB31UZxByLRZmJglxIQ11JVgnahbkcPiN
gJKdpYHHU0sfDzuwY2v1SFdLXlleTE5KUEKUR5CPlYPjNsTLywrrAYn4O/Dy
cXLjfbDc4mBnlqDWKBDj4+cCTRjS6IuJC3FxsrJSqR0HjkQcTOHNa6go2ttZ
v42NKistbG1r7OxqHRzu6+nrbO5oqmqsKqop+VJRkFv2BSosyiuvKK4oLwY4
qe8TYyLDXnp5Otlam5sY4u+An4gfAXBkFKVfhgWU1peXN9ejkIGDIDcDIwDE
L/wVBUhUmKuf1/Ngf5/XwU5eHs9eemMv4p6vA8FOeEpC98jwr6hndKRvnHpC
xyDYmZ4anpkepX3pGlAQf6E7C92ASP5Gih1Kq6sQtXTn2hq1FOHGBtHcysq1
WtjYnl/fmllZR7FDnxlYWP1l/gEZ2v7hwcnZKcCB4/z4+aevh2vwBXVZwZWJ
ru25vvXxtqHGgvKMNx6W2maaEp7W9wNdTDGq7U00Q70d3Z4YvXzuFBXi/TYi
wNHK0NJY90N8OIaxrpqMuADbfQ05LmYmdXnRe6rS2IuCt6OhrKUsu70yNz81
pqMqL+ddRHXeh9Q3gVmJYS/sTTyeGDo+1nEy1fV3tYr2fxbk/iTxtXdeesIL
Z6tHOsrSQty4yHMwM6HGwSUUw8bQQNfG0tjH3TnU3wMpXcwrn/tqMq42Zk+M
9eE1qG6AT4iP++uAF36ezuGvfE0e3QM15ib3RYU4kaTd01SQkaS+YgwSBfi5
MeZp82yycJzUd299XzwV5WMz1FNnv80kIcguI8od6OUcHxno89zd1OihNK7+
tLv64SmwGxgQziVD+3QTEZwHwqUeEWkJQTFhHkheRlRYgJOPm4WL/TYP510h
fg4leQl9PQ0Sh1MpyIqpKEqZPNKyszb0ee6YnhLj4fZEVVlcVkpQUU4URsPH
x8bOcZuN/RYnFwsPLzsE22JlZ+Hm5mTjYGVjY+Hh42ZnZ6VWmbt7G30eHi52
kMrKjGO4uDi4eDg5OdnxmwoL8SkryT2xtYx9GwUoOrpae/u7BscGoIHxgd6R
3tb+9jr8VzVUgKDiknwcU1pSAG9KiouBSfk+dwc4hvp6mqpKUtIUm8ISQgKi
/M983XNKcksaarJLC1HOwEe8XgU6vnB39vZExz3A18zR1tbdxcX3hYWzvZ2H
a2B0OMzILTTA703Yq/dxpHi/qpXdndW93bX9vY3Dg82jw+2T453Tk92zU/rX
asi9oAcnp4enZ0dn50TH5xcnF19Pv36Dzr59hw7OzqDD8/Oji4vjr19Pvn2D
Tr9/R/9anfz409G3n/bPv+2eXuyfnB+cXhydfzv5+oPcto0M7fT8DKUNEfp/
Od9tq/qS9S58oqt2d7Zne6qz7OObz/FB1nrSYR5WbhY6vo4mLpZ6HnZGr7yc
FEU5+TmYtJSlbc0NnJ+YKkjyO1gZWxjp6GkoaClLqitIiPGz8rIxob2vqYiS
ITkuoiAtFtQkhfl8iA5Ijw2u/JwcG+Tx5JEGGAEycgLM4pxMIZ52j+/JA59X
z+1TYkODvZ4qSvJz32US5qc+g8B1G2JluYVUzfyxQdQrfwcrw0Cvpw7mBpL8
rKAmKtAH4Dx3fqIqIxrk9czCSC8i2AeO4+Jo+dLbVVNVBnajq60UHurHw3kb
CQwrCyzgrpAgL+oFIX4uLXUF3+euwf6evJy3pUV45CUEgP99TXlnG2M/Dwcb
C1NVRTlYCbiAxZBHfKKjr6uNFAkZGq7n8CDEARc/N4euuqK4AJcwD5uehpKi
lIiMKD/6iEgIcmNTW0UOm0gF0UoK4WcJ6WjLP9BVfepknpeTGhj4XElJQkyM
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
0HtwT1FZTlpWQl1T5ZGRvryiDDoaWqoKSrIISiALEuRhZr0tyseipSilJi+q
gIHNwUT7kP0uvEJOnFeI866UMCeJw19kxXjgi3KykooKMmRlfnTQigjzI6iu
piQrI0E+c4HQkZeTovo66pq6GloPtHQe6uga37//WP+B2UN980dGtqYPrY2t
PRyc/Nws3e0dfJ95RQd5Rvh7x8UFpaT4JSZGZGYmFBYml5UVdHRAuS0tX9ra
irq6Snt7y/r6IHRKenpQkgATAJJT3wJS8praAQ5UMziGYGFb95fmDtQs6FT1
j8BZwAKyNSRpQAP4lHZ25Te3ACUIkYaRUbCDFpsACjSBCKikvbe0ow+AVPUO
1/SPEkbQqegeBEeIk2DjyFTTyBh46ZiaAS9tE1PgqHV8ErbVMDSCSN3AECJI
7eBiVT19oCm/tgG81HT1Ng+OtA6PoQUy4IWAg3hVR3dFW2dZSzshq66nl4gQ
RIeoaWCwsX+goa+/vrePBMEOCKrspAR8/t3g/NbzXzoJ/XjG8zPi89PFydne
zunBzuRgf2NNRUdDXVx0ePLbGA8XRztzUzMjAwyr+9rq91SU7qkrP9BUt7R6
/MTWwtDogZq6oqaWisFDXSNjfVMzQ5sn5ojbO1g7P7V75ubk4enywsvN28fD
29crJDT4TWx0XMLb+MS4d8lJn7I+FhTlo5OZ/SkvP/dzXk7ul8+IoE3LSE1L
jk2Ifh3o5x4R7BcdHhATFhQbFRzo7R4a5OXj7uz74qmfp4udtbGdhbHDk8dm
j/SePnXy8HBzcnKwtDS3sDB7/NhYX/8+5Ozs6OBgZ29v6+hoj86TJ9Y2NlZ2
dk8cnzk7u7u4Pndz9/b09Pf2Dn7pi58WFhT5/m1QTFhsxvvkvE9RHxISs9Ny
qotTi3KK2jtKOrs+NzTmNqJIR3pfl9/SmtfUXDM4VIvhPTwCoV/R24fDcHBR
excyroreAXSQd2VU1mTX4bUtZd195T39COa3tBe2deIYdHAAhisGMMYtWvQx
ztGB4ALIweAI5ICWsYnO6dmeuYX2ydmWsanG4fH6wdGGoTH0O6fne+eXm0cn
2yZmavtBx0x17yAOwzFoyZnbJ6cJKTghOjjb8Or64PJq7/wimAJH5D0AnPre
gcb+oZah0Y6xya6J6e7JGaLO8SlE2kcn2kbGsRdANQ0M40jQQQRGCCZEbSOj
UOvwSPPgECNExHrQ+aOBQ38t48sZ45fx2d44PTz4enq0vb6G9v/5v//Xwszk
8f7e9vrKzMT4zMTo3NRkf3dHW1MjUtdm1I/VpQWFnzOz0qBPmampae/SM5Lz
C3LiE94kvXubnJKAzeycjLwvWYVFucUlXwgRoKOwuKC6tqqxuaG+sQ6d7t6u
to7W9s62/sG+weGB3v4edMYnxyZGB0aHekcGe+amx8aG+wb7OhHpaG1AB21v
V2tfd1tLY01rU21Xe1NTPbX+Q1NTQ01N1ZcvudnZmTk5WRkZaUlJCcnJ73Jz
c7CZmBgfH//248f09PTUmJjo5IwPKR9TUzPT07M/pudmfsrP+YRfpyi3uqMx
t7KorLWuuqs5u6LwS21ZVWfT56ri7Ora3LoGCDUFam3U44h8LK9E6Y0IMhyM
cAjlBqk7gEZmVV1eUyvK/PqR8aJWGiNNbSWdPTX9w6VdvYhQBLV2AqiC5vaC
phZytccZcDZiAUCmb2EJpMAssAubpGbBMU0jE+ClbmAEjKAFHWAHsCAIdkAT
YMEx3bMgYq5nbglnwHnASPfsPHjB+eE7ODla0ARqumbmsAsEIQj1zy70zcz3
Ts/1TM0SZNCBECEicTBFBDRahoaJwAhdhCYggziOaR8d6xgbh+ig/WHBuXQY
/YWXCPr29fzk6Pjnn77/6aeflxbnL87O//qXP/349v3s9Hhna/vk+BBx9A/3
D46PDvaopxtsrKwuQFvba6tri7Nzk9Mz4/ML07TvyVGifR+CEnn21sTU+Oz8
zOLywsLS/Mzc9PTs1Pzi3MraMkQ2EUcEh0FzC7Nzs5Nrq4t7u5vHR3uLC2B3
eHNjZZn6Pt8Sabc2V3EAgjgG/enpSfL4V7JwMXl0MjrDw4PkSRP9/b09PV1k
UdaOjrb+0UGivpGB7pF+qGu4D+oZH6zvamkb7umeGKzrbmke6OyZHEKnsKG5
uKm1CrkKLsUDwy3DY02DI81Do7nVdV9qUXS3lLa0l7d1QmXI/FvaUZ6Ar5KO
Tgz4tqlpqo7o7qHqi9Ex5EjoU3NfHZ1UWdHWDkZqARHtJOg09A+Rs6FT3dVb
2dFNzowOfjp+dPvYZF5NY2FDa1lrV033QEP/SNPgWPPQONqqzj4IncaB0Z7p
ha7JucGF1f65Zbyqd2Z+aHFlcGG5dWQc77xzYhqb6LeNTnSMT3UBjem5/rnF
gfklHANbAReD80sjS6sQOILXwGJgNNeK4EAEOojgNZfAQYSw0zky1jE82jY4
/O8Gh9FBGPUr4Pz6e7iEz+b21tdvP6gJ6p//fHB0eHR8enZxvra+eXx6srO7
v394cH7x7eTs9ODwmLqz+uxi/2AbTgWwcJqDwx28X2R8IIjUT+iTJbQPj3bJ
wsBLK4vbu1vHp0eHxwcbW+trG6t7B7vnX88Q39nbRnD/cA86Ojnc3d9ZXl2i
7gI6O13bWN872D86oX7otx/fd/Z2t3d38FbJI7Y3tjZJH53V1eWVlaWNjTXy
6MmtrY39/d319dXDw33yRFdsokOeHr69vbm+u7m2s7Gytba0sTK3vjSzujC1
PDe5NDu1Oj80Oz48NzG6ND28MDm2PDO+Mts/Mzq+tDY4szA8t9Q7MdMzPj00
u9g/NTe6sNI2ONoxPN41OokghA42EcRVHWMV13AMS5BS0d6FCgIg4AqPUYo0
CQjgso8IWoxeHIw+OuARQxot6CDCGTDOqSPxEprq+wZBR13vUMvwROfEbPfU
PNq20SlsVrT3lLd1o1PfN9w3u9Q+Nj0wvwKC8HL8XJwZdKBPqO+emgUmgAVM
ARz8LHJBwJUBCRhKG1gJfAf4DMwtEg9CkgYBKwgoQcRxeqZ+UffkFNQ1MUlX
5/gEoYm4EsnZesbxF5vsHpv4o4Fz9Q1cnSRnfJ+bu3t//b/+19La+trW7ref
//Tn//qfOODbz385+/b9+Pwb7UYd6rDt/SMciT6Z9v4JpvTjK0b795++/fzn
nw6O9jHsQQQQQB/xk7Pj0/MTHHn+/RsEYzs+P9s7OtyCT+zuoN3Y2T46owzv
8PTkAMZ2erK9v7ewsry9f4A3QH+gydrWNoDEG1jd3CJrmCAOMslf6YT2ke7u
/h7AB+9gDYihjwguAqAPQgeR9c0NCJ3N/V1obX9ndW97ZXdreWdzaXtjcWt9
43APwfmN1dmNlZX97eW9rem1panVxdn1zdH5xenV9eHZeWhmbWNsYWluY2ti
aWVyeRVxRCD0ER+ZW2gdHcWYGVxcxIDpmUGqMzW6ujq2sto5iSE3jkj/7Fz3
NDXSemdnMbQwlqjj5xdQX1MHTE0PLy5hmKEiwEijTjI1jZfggKGFRey6lC9h
MGOcwxEa+gYx5snYxl4ytuEIQKYPrjEBjpZAIkgBR2iBD2ABsKAGe4nvQAQN
Qgd+BMFneHGF/FxsgiPQhODQwjKE9wb1zcwS9U7PEJEgOnj/jBD1IVGcmOqf
nP6Dg3PTB0z0w3aPTqmPR3/86cdf/mtte+/k64+z7z8juHd8dgRwTs6PL75j
F9qdw5OLn/4MXmirfOxioAITjNWLb+dfv3+Dp8AdGFvgA8sAI7uHB0ADQgfa
Pz4CRAe0XRDwIUwhDo7Wd/ZPv/20fXCMd/X157/gDeCdoD08+0reD94GtLV/
hCM3dqkv5a2ur4GXCzCI9O5g//T8DIJD4X2iBUQIQnBPiqnjQ2j7BGZ5tHt2
vHd+QgSONo/259ZXZteWEcfehe11BFd3DxZB7/HZ+g617tbm3tHk4srC6uY4
tYLQyszKOvbOr28hMru6Mbu0NrWxObW6DlKQkGC0jy+tIDIwPYtI3yQu47OD
Mxic42inN7cmV9Ym1tYRxN6RpeX53b2BuXlE8BJsIoj+5PrG+OoaqMEgxPCj
jdUFoEEu+BjMJK3CUEcfox0HAB8cQKvchwgasCrQAccBIHAWkrMxggMPAjUA
CmfAa4EGYMGp+mgRCkCaxZCSBz+I4EPTPBEhiA4RsSFCEPYS6iEgAw1MzVxb
if/Klf+mAf8rpvCbwPz1469WOvRbdC5p9/TiWtEQOL3awjJo1J/QwD+lnZxy
isPz02t1dHF2rfbOvtL1909yGW6HgBiPof2sawQMiYAkEcF26/h67Rz9ou3D
fWjrYA8ehHZzDy55iBaeC1rRAuqdg2PaUnW7K5s7q5s7aFc2tpc3ttEu7u4u
7ewu7Owsbu+gRSk4v72Ndnx5eWJpmbRjS0vji0toxxYWh+bmoOH5+dHFRSqO
A1ZWJldXB2dnEUEfQfT7p6dxGCIgjggwQv1TM0Rji8vDcwuI9E5MIRcCpDgG
kYm1zdHlNcCF0U6GPVjAgB9bWUccAnSEEbqIZ+F4krMhgs2arl68EMLBOKCq
o5vMsIEIGArxRFwQ4LDABB06RMR0SBYH8JGkEf2+4PzD8f8fA4dxcDLqpvPf
5Jj/MjiXqPmXwbnEzq9TQwdn54BiB9njFg2cLRo40A6NGmh9e2+Nxg60SsOH
aHl3b3mbYgct2Fna2iHt7PrGHJXUrc9S2d36zMra9OoaWoISAJlaWZ1aW6N2
bWzgYGACuEAQ9qI/OD0DuCjoFpfHF6kWmeHowhKVH84vUskkLV1Ef5BGEy7p
FDizVGZFkCHUABmQMr66QebKSBx0kNlmCIjRd5GJArwEvBDikBMSdghZ9b0D
wAQ4ABDCC+hAHykZPWcj4NA1QvsV0P5WcP4ZEBiH9z8k6J/UTeDsn3+9Vntn
F9fq7NtP1wrlD11H1HimhCrp8Pz8Wh1dXFyrS+AwsnwDONensoyfVTE+NW8T
Zc7x0RaDdo5+EeNDJPf2aQ882jvY2T2EdveOoL39Y7q2tveJNrf2oI3NXaLV
vd31Xapd29mhvj6/vb28s412aXuLWmV4e2t5k/pmPdqFTWrtCALU3Mbm/Prm
/ObW4iZlT2hH5xemllbA0fTyKvojM3OwJ/SHgMP0HGnByNDULNrByRnGODhC
PonKCznk6MLK8NzSwPR83+QsEfpkugMaml2EsIlg/9QcpdkFwg7J2UhpA9OB
N4EggINNcEc2kQoCE4BDsjIybwZzaRsZJfMD6JNdOIx4EKo8CqWZ35yq/UNw
Lg3sPxo4p19/XKubwLkJkJtEp4ORGvJdiX8BnKu3GN0EDv0BrPsHlPbIZN/+
L8gwUrN/cAIRoLZ3Doj+ztE+pY29PSJARASOgA8RCKILjDBqYWOLtJOLy/Am
0IQW/fH5RXCE/sLGNlmPhWhubZOIWkYP+EzNjszMo/6aWlpFzYX4+NLa2OIq
GAEd4KJ3YoZMD06ubEATy+vkAAiIQQAHUPTSZgnIlBpMBxECFKlrSJFF5ihI
7U+m1MikNDj6ZeZ5fAK7cADxIzK/0TVDUdP1u4JzdVT/B8Ahi4Fc1U1OcXD6
9R/q8Owb0dE5hv233yT6F4h+WSrh4jsR45fyGG9eZfzOEaMOaGuVEO0dn9G1
eXxC19YRJTLbsHd0Ch0cUgIXB/uU9veOYToQnSOCFZ0sspdmTPu/6IAScjwi
MgECrW1tEq1ubkArG+tEsB4iuM/i+jpZzgiao02yUyZFW9FoZmlpfnUV/emF
ZaIp0EHT5NwiNLe8Bs0sriAyPjM/MjkziJE/OgFY4CawFbBD0CCYIEhchtgQ
oQkCHSh/yJwAIQWAIIJ0jjCFCJnKIwcQN2GcjibIECFC5gfos4I1A/21/f1o
fys4N10hLw1per1wEwj/8Dz/NDgnNFIut7RK5Pxqu39yca1+R3D+vsDI36j5
18AhusTOTeDsH58dHp2BmsMDSgQciI4MnZqDw2OiSxD9or/NQkAEIqL17S2i
SwQRJwIghB0gQxYEA0QIUlnf9jb6JIL+xu7B+s4+0RrqrL9pfmWdLuAzgUE+
NUut40ojBc4ytbpJLIaYC50Xgkz32FTX6CSECojQAV7ItDNBiUwvoCVz4KQC
AkqAgporQw42NQ1bAUSkzLmUpJGZN+DTtTDXPT+H9vcFh775HwPn8OyImgq7
0h5fnByfn11tD89+XKuD0+900YNH5z8dfv1+rW4C51ec+uofh9I/AueS9fw6
OJRo4Byh3T+BLj3g9dIjkumb9PqIUPU3pPbpPBFrovvSzt420fbhIUSyuzXy
tBXaunngCJuIgx2qLFqnvInq06bvlta3iBbXNonIGnroUNN9NJRWNndw5Nzm
7vzW3sL2PoQ+2AE1MCAQRERSNWJGI/PLqF/I3BoYIR/ikPm3qY1tsklqH/CF
lobVwsTaOtwEdIwur2ATvJDNSxPURG3zMx1zM2h/R3CuHRj/dsf55RJ7WRQm
1+nk65+u1b8JHPos/W8F56rpEF0Lzu7fwDk6pOkKOFefLX61eiI6Ojn8myP9
HR/yoTDR5b1nZ/unp3snJ6iztg4OCD7Eg4AJiRCa0FJ10+4B0SXTIQ9z2dw7
pH6do9Ptg2McgzjQmF7bAjtLu4fLe0eLOwfAZ2adAmp2YwdCHwfAj4glTa5v
kQ9x6Ggggv7s9h5oAlbkY1B0YDdoYTfTmzhgmXwChQ5cBgSBHUBEPt9hnJTu
XJonIv+n9Hsm8d+KCPme8vUD9evFtSLLFRLtnZ/R9VunnY9Ov/26js++E52c
/4D+4WH/pMjZ6Jv089w0rc24/hvjOgmMEwLUQj1/O+zG479e7F+cEzH+3ejB
S7rp73/T8f8bpP+ErtJEJ46+iz5xATFCx6hLs4Jkrg+6+kRy8sjmS49OZnwU
7LVP/bv0JOW/PyKW9kyZpe0txmdkQJNLi2Pzc8Mz04NTkxA62ERwamV5Ymlx
FLtmZ8gjBsYW5hGZWVsdX1wgKz+T593gmIGpyf75eahvbo4ODvmD/Mvg0Klh
BAf/cf+NwLlKDcQ4S8YoRgp+BZxL7Fxz8O8EDuNrGcU4yP8Z/cfAufS4c/pz
l66ycxUc6rlLNzyFHMgQaqCFzQ2wQzS9skzYGZmdgQg10zRqwA55eho0vbqC
CNihA0WeNQChD44GFhYgsEPGMCM4iJx9+/4vg3Pp//0mQP5o4DCKnOHw5Ct0
1TIuIcMIwtVZ6Ku69JnObwXnJv33AucSNYzsMOJDnl/GSA09zvjUS0Z2CCZA
hrBDOIIHkcfNEHwIMuSxgCACbgJ/ATsQeCGMEKDAEfaCHfrDbnpo09Hd09Mn
tBuS6b8jtXbZvwrOtf/pv16zXONEvzqYr4LzfwLIr/wUQg10/P3na3UTCJc+
xLkJLvqnOb8XOIyOz6g/Gjh0OhipQfwmgi4ZzVWgGPGByOPJCDjghb4EOiKM
BkTggsAFcKAew0F7LBR5og2xGFAzv7kBpgAO4mgRaR8fh9rGxggU5C9AwEHk
6i1n/xCcq//jJP7fBRxGt6JTc3B88SvgXGXhWnYIPlc//fzl3rnfCM5NzoIa
81oxfs38N+nfCg4jMlfFSNBVasgZLiVydAOiQ0Hd6vA3atYP9hndhxRBJKNj
9BRCDalo0MKAFrY2Z2muhL1oARH9Jhx6nkb/ff9PwLmah980e3bT6jr/v4ND
R+YX3XAv3CVqrs4eXGKHcRdBZufkHPq9wNk+Ob5WfzRwGJ3l0lQ5/X4hxiMZ
qWF0q5tKIUY6CDhEBCXq9iHaJmGHei4t7TGdy7s7K3u70OL2FiIAhP7cW5K/
0Z+HO766Bo2trNLBoT+2418D59oC9vDbjbeU3LgsFQ2Hq7oJnJv0L4DDaDR0
3XiX9c23n117kyedFzoyvy84W//7fTh03TSwb9J/DJybPmC6hM/VWThiWDfO
wu3vQYQOMsNGRPI3RnDI05yXwNfe7vrhwcbRIbR2sA+IgBJEJ4iUP8SbJtbW
IbDz/wEDBwf2
       "], {{0, 183}, {275, 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSize->Automatic,
     ImageSizeRaw->{275, 183},
     PlotRange->{{0, 275}, {0, 183}}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.770982523750349*^9, 3.770982538511217*^9}},
 CellLabel->
  "In[1480]:=",ExpressionUUID->"0f057e57-3a08-4fb8-857f-5635e15cde04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "[", "img", "]"}]], "Input",
 CellChangeTimes->{{3.770982543096592*^9, 3.770982544683074*^9}},
 CellLabel->
  "In[1481]:=",ExpressionUUID->"35537f1d-8957-44cc-a83c-dbf6103cae9d"],

Cell[BoxData[
 TemplateBox[{"\"tabby cat\"",RowBox[{"Entity", "[", 
     RowBox[{"\"Concept\"", ",", "\"TabbyCat::rvg7f\""}], "]"}],
   "\"Entity[\\\"Concept\\\", \\\"TabbyCat::rvg7f\\\"]\"","\"concept\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.7709825472140837`*^9},
 CellLabel->
  "Out[1481]=",ExpressionUUID->"c368dcec-7cf3-4b38-b2e9-fbef689ce2cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Network Data", "Item",
 CellChangeTimes->{{3.770982551321478*^9, 
  3.7709825560605593`*^9}},ExpressionUUID->"9ee5de3c-d91a-4195-8b5f-\
dca7a01615b0"],

Cell[CellGroupData[{

Cell["\<\
Internally represent info as numeric tensors. Convert different data types to \
tensors \
\>", "Subitem",
 CellChangeTimes->{{3.770982551321478*^9, 
  3.770982584211678*^9}},ExpressionUUID->"e3016110-af26-4659-ba6e-\
49818b62e3b6"],

Cell[CellGroupData[{

Cell["Tensors (n-dim vectors)", "Subsubitem",
 CellChangeTimes->{{3.770982551321478*^9, 3.7709825932646437`*^9}, {
  3.770982805642157*^9, 
  3.770982805643318*^9}},ExpressionUUID->"7da13b89-45d2-4c30-aef7-\
06a30a8daeb7"],

Cell["Encoders/Decoders (convert data to tensors)", "Subsubitem",
 CellChangeTimes->{{3.770982551321478*^9, 3.770982581506407*^9}, {
  3.7709826124110937`*^9, 
  3.770982624838265*^9}},ExpressionUUID->"861eeae4-3e77-4346-ada1-\
8366e5cf42fa"]
}, Open  ]]
}, Open  ]],

Cell["Structure", "Item",
 CellChangeTimes->{{3.7709826288650293`*^9, 
  3.770982640560647*^9}},ExpressionUUID->"0f7c18db-b07f-49b4-a169-\
62692c03e8a3"],

Cell[CellGroupData[{

Cell["\<\
Layers (Perform series of mathematical operations on tensors depending on the \
applications)\
\>", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.7709826420212603`*^9}, {
  3.7709827268525352`*^9, 
  3.770982747211735*^9}},ExpressionUUID->"7f408efc-3d1d-403f-a850-\
7816ceb3ba45"],

Cell["Constructors", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 
  3.7709826648852787`*^9}},ExpressionUUID->"f9ce10ce-97e0-432f-b835-\
6356115b4bf7"]
}, Open  ]],

Cell["Training", "Item",
 CellChangeTimes->{{3.7709826288650293`*^9, 
  3.770982675784121*^9}},ExpressionUUID->"ee98d4b3-8e75-43d4-90c5-\
717bb4dbc0fa"],

Cell[CellGroupData[{

Cell["Basic theory of training", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 
  3.7709826989829473`*^9}},ExpressionUUID->"89df84d0-adef-4e30-8c15-\
48e3035a0987"],

Cell["Loss layers", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 
  3.77098268698641*^9}},ExpressionUUID->"3037131c-49f2-4e9f-bfa5-\
436c52fe39f8"],

Cell["Improving various methods", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 
  3.7709826911238737`*^9}},ExpressionUUID->"d588368d-e867-40d4-8eca-\
8b7797e3eb0f"],

Cell["Initializing Weights ", "Subitem",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 
  3.770982701871809*^9}},ExpressionUUID->"6f2e21e2-e006-4c27-a058-\
a0847c140096"]
}, Open  ]],

Cell["Vectors as coordinates of points", "Item",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 3.770982694629505*^9}, {3.77098283013652*^9, 
  3.770982834182329*^9}},ExpressionUUID->"0203a2c2-605f-4e7b-a644-\
5a81d4d6b866"],

Cell["Matrices as Grayscale images", "Item",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 3.770982694629505*^9}, {3.77098283013652*^9, 
  3.770982856678643*^9}},ExpressionUUID->"a0a2ca53-0a55-4f1f-8a6e-\
b9562fb6e300"],

Cell["Rank-3 Tensors as colored image", "Item",
 CellChangeTimes->{{3.7709826288650293`*^9, 3.770982643875928*^9}, {
  3.770982679695073*^9, 3.770982694629505*^9}, {3.77098283013652*^9, 
  3.770982847924749*^9}},ExpressionUUID->"457c1cf8-a3d1-4462-b3a5-\
871d9097a168"],

Cell["Class Encoders", "Item",
 CellChangeTimes->{{3.770982887814303*^9, 
  3.770982890307478*^9}},ExpressionUUID->"daff58cf-797f-40ae-92fc-\
40c73d99b85c"],

Cell["\<\
NetEncoder is used to convert any data we receive to an input tensor. \
Similarly, after we have done the optimization, we convert the output tensor \
to the data format we started with using NetDecoder. \
\>", "Subitem",
 CellChangeTimes->{{3.770982887814303*^9, 3.770982941476274*^9}, 
   3.770982994392354*^9},ExpressionUUID->"e53b2b70-4f33-4586-a7d1-\
3cd973b0dc95"],

Cell["Class encoders and decoders", "Item",
 CellChangeTimes->{{3.770982887814303*^9, 
  3.770982946091474*^9}},ExpressionUUID->"b4fb7b3e-cc47-4447-8fc5-\
197c48c870a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", " ", "=", " ", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<male\>\"", ",", " ", "\"\<female\>\""}], "}"}]}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.770982948587357*^9, 3.770982978932847*^9}},
 CellLabel->
  "In[1482]:=",ExpressionUUID->"4975e568-a173-4e72-9344-6b00acbca5b6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"index\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "2"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"\"\\\"male\\\"\"", ",", "\"\\\"female\\\"\""}], 
                    "}"}], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Index\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"{}\"", 
                    StyleBox["\"  (scalar)\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"index\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"range\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"1", "\"..\"", "2"}, "RowDefault"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.770982980202992*^9},
 CellLabel->
  "Out[1482]=",ExpressionUUID->"6fc73657-b740-4081-bcd8-ade0bb33112f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use it to create the input tensor ", "Item",
 CellChangeTimes->{{3.770983000955531*^9, 
  3.770983019215369*^9}},ExpressionUUID->"682499c1-c3ec-4606-ae1a-\
de5e514a0b51"],

Cell["Character Encoders", "Item",
 CellChangeTimes->{{3.770983000955531*^9, 
  3.770983023282671*^9}},ExpressionUUID->"fc02e29b-d990-43bc-8b11-\
de56cb50678b"],

Cell["Encoding all the ASCII ", "Subitem",
 CellChangeTimes->{{3.770983000955531*^9, 3.770983029500411*^9}, {
  3.7709831317789717`*^9, 
  3.770983134795897*^9}},ExpressionUUID->"ee3f1287-37cd-4114-9fe6-\
cfe6d16e0fcb"],

Cell["Image Encoders", "Item",
 CellChangeTimes->{{3.770983000955531*^9, 3.770983029500411*^9}, {
  3.7709831317789717`*^9, 
  3.770983143190247*^9}},ExpressionUUID->"6f7eeeae-4978-4b81-8bb8-\
f8ef778023c0"]
}, Open  ]]
}, Open  ]],

Cell["Seq2Seq", "Subsection",
 CellChangeTimes->{{3.771150567842861*^9, 
  3.771150569790489*^9}},ExpressionUUID->"cf1673b0-6477-41c4-b72e-\
0b691c6fc9f4"]
}, Open  ]]
},
WindowSize->{720, 755},
WindowMargins->{{Automatic, 0}, {Automatic, 100}},
SpellingDictionaries->{"CorrectWords"->{"unnested"}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 11, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 67, "Section",ExpressionUUID->"218022bc-2ce2-40cf-ba04-cb089e002847"],
Cell[CellGroupData[{
Cell[763, 29, 192, 3, 54, "Subsection",ExpressionUUID->"cb89157a-6455-4c43-8907-8cef5c15c9bf"],
Cell[CellGroupData[{
Cell[980, 36, 171, 3, 45, "Subsubsection",ExpressionUUID->"023d0f7b-b413-4380-9d57-d9ba08be5076"],
Cell[CellGroupData[{
Cell[1176, 43, 211, 4, 32, "Item",ExpressionUUID->"89702ad8-b4fd-4954-b256-41ea486ec2f5"],
Cell[CellGroupData[{
Cell[1412, 51, 232, 4, 27, "Subitem",ExpressionUUID->"553ba881-dc66-4ab4-808e-8f20fae9a28c"],
Cell[1647, 57, 234, 4, 27, "Subitem",ExpressionUUID->"8b8b4502-386a-46fa-9262-1d71837b45a8"]
}, Open  ]],
Cell[1896, 64, 185, 3, 32, "Item",ExpressionUUID->"7017273c-c6c1-4086-8ad0-5c581c805e4f"],
Cell[2084, 69, 173, 3, 32, "Item",ExpressionUUID->"c8126e97-380a-4e6c-9b1c-ba7c2c81d500"],
Cell[2260, 74, 265, 6, 32, "Item",ExpressionUUID->"2935f48b-432b-44c1-8305-5ad9ee193a6f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2574, 86, 175, 3, 45, "Subsubsection",ExpressionUUID->"8d36cc77-3aef-42a8-993e-bf6f3bbffa2e"],
Cell[CellGroupData[{
Cell[2774, 93, 178, 3, 32, "Item",ExpressionUUID->"4bafd196-553d-4e50-be8f-c296ad1cbb36"],
Cell[2955, 98, 287, 6, 53, "Item",ExpressionUUID->"1bddc69d-03b4-4c61-bd20-34b9b32d0422"],
Cell[3245, 106, 194, 3, 32, "Item",ExpressionUUID->"f3b3c346-47ae-4e44-9627-a49729712462"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3488, 115, 175, 3, 45, "Subsubsection",ExpressionUUID->"6a2d2e45-4e99-45d6-b4a2-ba68f5d7e8a8"],
Cell[3666, 120, 179, 4, 32, "Item",ExpressionUUID->"6e18b5e9-ebbc-49c0-8fab-d78350753d6c"],
Cell[3848, 126, 302, 5, 30, "Input",ExpressionUUID->"8de778bb-0c92-4347-a84d-24007709a749"],
Cell[4153, 133, 509, 11, 33, "Input",ExpressionUUID->"ea12258e-d854-4e99-b416-777912794b81"],
Cell[4665, 146, 155, 3, 32, "Item",ExpressionUUID->"21eb248b-3e67-4286-806b-07900086c5f0"],
Cell[CellGroupData[{
Cell[4845, 153, 198, 3, 30, "Input",ExpressionUUID->"4747054c-bf79-4a09-9809-cc612af6a9f7"],
Cell[5046, 158, 175, 3, 34, "Output",ExpressionUUID->"43d3c3eb-0d78-4a73-b219-c4f7731657be"]
}, Open  ]],
Cell[5236, 164, 161, 3, 32, "Item",ExpressionUUID->"7bc4919b-e9a0-4508-bd52-b111e4ba810c"],
Cell[CellGroupData[{
Cell[5422, 171, 193, 3, 30, "Input",ExpressionUUID->"debc6f87-0108-47d4-9df7-a2b33b0d3a0d"],
Cell[5618, 176, 170, 3, 34, "Output",ExpressionUUID->"c342b934-a478-48cd-8b0f-e843d3d23b0f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5825, 184, 168, 3, 32, "Item",ExpressionUUID->"2211429b-f0af-446a-a8d5-589fe968cebe"],
Cell[5996, 189, 150, 3, 27, "Subitem",ExpressionUUID->"c807467d-249d-497d-a7f6-2215acbe5589"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6183, 197, 525, 12, 30, "Input",ExpressionUUID->"81d50baf-34ed-4f68-8cc0-d87ce82564b3"],
Cell[6711, 211, 2013, 41, 216, "Output",ExpressionUUID->"23d5768d-e11d-4c94-92df-14c00e4ed136"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8761, 257, 158, 3, 32, "Item",ExpressionUUID->"5836d05d-c1dc-4356-83b2-7873580ae51f"],
Cell[8922, 262, 157, 3, 27, "Subitem",ExpressionUUID->"9bc39cc8-8cbe-45c9-910a-baea30724edf"]
}, Open  ]],
Cell[9094, 268, 290, 6, 30, "Input",ExpressionUUID->"e1d067d9-9b58-4ab6-85d2-1f7ded61a26f"],
Cell[CellGroupData[{
Cell[9409, 278, 268, 5, 30, "Input",ExpressionUUID->"29e31fcb-ac1b-4890-8585-fb5cd8559be7"],
Cell[9680, 285, 196, 4, 34, "Output",ExpressionUUID->"ee2733e0-52d1-4aa7-9e10-87ea1b0899e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9913, 294, 201, 3, 30, "Input",ExpressionUUID->"15208e73-0024-4521-ba9a-5bbdf38e9a91"],
Cell[10117, 299, 425, 13, 45, "Output",ExpressionUUID->"78fec519-b559-495e-8882-551d2886f623"]
}, Open  ]],
Cell[10557, 315, 523, 13, 94, "Input",ExpressionUUID->"84a1ec4b-ada6-436c-82b6-d87500bb6943"],
Cell[11083, 330, 151, 3, 32, "Item",ExpressionUUID->"69ed79ea-6838-417c-a005-058fb2760bf0"],
Cell[CellGroupData[{
Cell[11259, 337, 403, 10, 30, "Input",ExpressionUUID->"1e32e475-2f3b-4ec2-b0d0-1e2346807283"],
Cell[11665, 349, 347, 9, 34, "Output",ExpressionUUID->"60503a60-18fc-44b9-a58a-ca5a2bef32a5"]
}, Open  ]],
Cell[12027, 361, 420, 11, 30, "Input",ExpressionUUID->"a93a704c-8ad3-42bc-8f83-3c3575ed1b71"],
Cell[12450, 374, 439, 14, 95, "Input",ExpressionUUID->"7482cd50-b262-47a8-bf70-3fe5b0648439"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12926, 393, 224, 4, 45, "Subsubsection",ExpressionUUID->"72e1686b-d48f-47a3-bc78-dd065c07cad7"],
Cell[13153, 399, 150, 3, 32, "Item",ExpressionUUID->"7738a5b4-0ada-4637-bb1b-55c8060ba0d6"],
Cell[CellGroupData[{
Cell[13328, 406, 420, 11, 30, "Input",ExpressionUUID->"b882378c-cba8-4de0-b5fe-2ee535f827d7"],
Cell[13751, 419, 639, 20, 76, "Output",ExpressionUUID->"4fa44cf6-94e4-4d69-98a4-8854cb262feb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14427, 444, 398, 11, 52, "Input",ExpressionUUID->"37b1a9a4-50ed-4081-b0f1-10d5615b909d"],
Cell[14828, 457, 620, 19, 60, "Output",ExpressionUUID->"e24b9a0a-f8aa-4878-a681-7c8ffad0a00b"]
}, Open  ]],
Cell[15463, 479, 460, 11, 30, "Input",ExpressionUUID->"cfc25c07-fd09-4807-9e87-b7049310fda9"],
Cell[CellGroupData[{
Cell[15948, 494, 341, 7, 52, "Input",ExpressionUUID->"b3a76108-d63f-4705-a3b3-3bbfb90dd7af"],
Cell[16292, 503, 254, 6, 34, "Output",ExpressionUUID->"b2b4e25a-4380-4c60-b124-c08db76089dd"],
Cell[16549, 511, 7893, 217, 335, "Output",ExpressionUUID->"971209ce-3ddd-4016-95f7-b3ab21414aab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24479, 733, 204, 3, 30, "Input",ExpressionUUID->"ab6b20af-f71a-4940-8977-c139ecaa534d"],
Cell[24686, 738, 154, 2, 34, "Output",ExpressionUUID->"9ac343ec-d8ee-4a3c-9bd0-59b70d8194f6"]
}, Open  ]],
Cell[24855, 743, 275, 4, 32, "Item",ExpressionUUID->"5fc69daf-7cf2-4c47-a7fe-0fffbd968386"],
Cell[CellGroupData[{
Cell[25155, 751, 209, 3, 30, "Input",ExpressionUUID->"d800e204-f909-46e5-a92f-c69c3b2fa9f4"],
Cell[25367, 756, 159, 2, 34, "Output",ExpressionUUID->"5d2947fc-fea6-4cfa-805e-8420561cb569"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25563, 763, 269, 4, 30, "Input",ExpressionUUID->"1a626dae-dc84-480f-a6dc-77309af99d9e"],
Cell[25835, 769, 686, 11, 56, "Output",ExpressionUUID->"5b362de3-c2e3-4ba2-8ab7-ec89930c80e9"]
}, Open  ]],
Cell[26536, 783, 156, 3, 32, "Item",ExpressionUUID->"c5dc8039-a2f7-4f7e-95cb-dae74025d3ce"],
Cell[26695, 788, 205, 3, 30, "Input",ExpressionUUID->"514d9d85-217a-4575-b7b2-703e2c450d48"],
Cell[CellGroupData[{
Cell[26925, 795, 292, 7, 30, "Input",ExpressionUUID->"4c69a5a1-0e45-43d4-9d96-898a75238957"],
Cell[27220, 804, 193, 3, 48, "Output",ExpressionUUID->"a6e74b0f-32cc-49eb-be66-a36061129612"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27450, 812, 379, 8, 30, "Input",ExpressionUUID->"0d7de9ea-4905-4df3-8145-70cb0e213a58"],
Cell[27832, 822, 243, 5, 48, "Output",ExpressionUUID->"e75d1112-6a58-49bb-9782-cc6868a2936c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28112, 832, 422, 10, 30, "Input",ExpressionUUID->"dbe857f1-15f0-4d0a-8d70-38b157fa4e69"],
Cell[28537, 844, 192, 4, 48, "Output",ExpressionUUID->"ce786ecb-1420-4082-a729-b45426910af7"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28802, 856, 162, 3, 67, "Section",ExpressionUUID->"1a2e1a33-033f-4f6e-abcb-b79161ee9271"],
Cell[CellGroupData[{
Cell[28989, 863, 238, 4, 54, "Subsection",ExpressionUUID->"f8d6890a-3e9d-4a98-8e0e-fe7696b67911"],
Cell[CellGroupData[{
Cell[29252, 871, 203, 4, 45, "Subsubsection",ExpressionUUID->"2182fbe4-2b89-41bd-a573-e9b9e9318030"],
Cell[29458, 877, 215, 5, 32, "Item",ExpressionUUID->"9a902112-f14e-4f5e-ba2f-b27244fc6aa3"],
Cell[CellGroupData[{
Cell[29698, 886, 475, 12, 30, "Input",ExpressionUUID->"67db5faa-2d51-43ce-8b04-785c92c98bfd"],
Cell[30176, 900, 11714, 223, 214, "Output",ExpressionUUID->"fcb836ae-925f-4eae-8d66-0aec6ca7276d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41927, 1128, 251, 4, 32, "Item",ExpressionUUID->"1c0218bb-3a3a-47c1-a0c6-8f3bab75fe98"],
Cell[42181, 1134, 237, 4, 32, "Item",ExpressionUUID->"c6046789-3bc1-445d-b8f3-a2f8ec4c478f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42455, 1143, 298, 6, 30, "Input",ExpressionUUID->"fcb7b454-d930-402b-9367-a89dd48a6d94"],
Cell[42756, 1151, 239, 5, 34, "Output",ExpressionUUID->"d6aec747-dcb9-424b-a62b-bc5e3e3728c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43032, 1161, 225, 4, 30, "Input",ExpressionUUID->"de2998f9-1e70-473c-ab4a-ee5a688ae947"],
Cell[43260, 1167, 148, 2, 34, "Output",ExpressionUUID->"08b1c6bd-667d-42a3-a1ba-33b5d1b70952"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43445, 1174, 222, 4, 30, "Input",ExpressionUUID->"f50cc656-b4dd-4f33-ac3e-934bba005871"],
Cell[43670, 1180, 149, 2, 34, "Output",ExpressionUUID->"a6213810-f2df-4454-b683-6f095ae147f6"]
}, Open  ]],
Cell[43834, 1185, 202, 3, 32, "Item",ExpressionUUID->"b2d5cba2-64f1-400b-99fa-31bb5cb2cae4"],
Cell[CellGroupData[{
Cell[44061, 1192, 230, 4, 30, "Input",ExpressionUUID->"5c6f78bd-3cd2-465e-9bdc-284dd408d4ae"],
Cell[44294, 1198, 149, 2, 34, "Output",ExpressionUUID->"ce763349-e414-4fb2-b8f9-aa00d53752e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44480, 1205, 237, 6, 32, "Item",ExpressionUUID->"13ecd2ad-8858-48b3-8f1d-4a50de02e19c"],
Cell[44720, 1213, 193, 3, 32, "Item",ExpressionUUID->"3632689d-e5c8-44a6-87c6-ce672e61babf"]
}, Open  ]],
Cell[44928, 1219, 269, 5, 30, "Input",ExpressionUUID->"c3322c6b-3b79-48f7-a177-2a6c414936c8"],
Cell[CellGroupData[{
Cell[45222, 1228, 433, 10, 30, "Input",ExpressionUUID->"c3b1825a-c252-4f80-8c5c-44f43f70401d"],
Cell[45658, 1240, 389, 9, 34, "Output",ExpressionUUID->"c9ff0680-c8cf-472b-a843-11c552054d2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46084, 1254, 235, 4, 30, "Input",ExpressionUUID->"02de033c-3bc1-4a9c-bfde-17ca9706be03"],
Cell[46322, 1260, 654, 19, 62, "Output",ExpressionUUID->"bca63f18-008b-4cc8-8ec8-a38a0ec2137d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47013, 1284, 257, 4, 30, "Input",ExpressionUUID->"f70eb368-75f0-44d1-b054-351e5c09ad2a"],
Cell[47273, 1290, 312, 7, 34, "Output",ExpressionUUID->"c0c2f41d-6638-4028-b554-09f3820eae27"]
}, Open  ]],
Cell[47600, 1300, 177, 3, 32, "Item",ExpressionUUID->"5f21829c-fdb1-4963-a546-2dd5486c55a0"],
Cell[CellGroupData[{
Cell[47802, 1307, 307, 7, 30, "Input",ExpressionUUID->"569f103b-cc38-46c3-80f4-5026ec555e9e"],
Cell[48112, 1316, 291, 6, 34, "Output",ExpressionUUID->"e92b6fc3-e346-48e6-9975-ec8b71dac0f8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48452, 1328, 162, 3, 45, "Subsubsection",ExpressionUUID->"3f6324ca-e77b-4500-9a23-a8682d24be79"],
Cell[48617, 1333, 283, 6, 53, "Item",ExpressionUUID->"6e470a25-fd04-4807-a4af-aea0e9c398b0"],
Cell[CellGroupData[{
Cell[48925, 1343, 418, 10, 52, "Input",ExpressionUUID->"59e8a6b1-90d8-47da-a57c-05524c1e47c7"],
Cell[49346, 1355, 230, 4, 34, "Output",ExpressionUUID->"aecff02e-c5d5-42c0-a1fb-1f44ef8f6cf3"],
Cell[49579, 1361, 229, 4, 37, "Output",ExpressionUUID->"13191f34-ce9e-4abf-9f13-965c08385763"]
}, Open  ]],
Cell[49823, 1368, 262, 6, 32, "Item",ExpressionUUID->"dfd17466-a5a1-44b3-809e-e2f2dbdb3dd1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50134, 1380, 187, 3, 54, "Subsection",ExpressionUUID->"07fd4c2a-f94e-4895-9c17-748d37d33cac"],
Cell[50324, 1385, 154, 3, 32, "Item",ExpressionUUID->"11af8db9-0e6e-45ee-8f8b-572337fb0a54"],
Cell[CellGroupData[{
Cell[50503, 1392, 557, 15, 30, "Input",ExpressionUUID->"a4e90acf-5ce8-4a30-83c3-b704c374894b"],
Cell[51063, 1409, 1817, 36, 325, "Output",ExpressionUUID->"2ad330c5-29ad-445c-ba63-6aed13bf7b11"]
}, Open  ]],
Cell[52895, 1448, 167, 3, 32, "Item",ExpressionUUID->"26ba69a2-a70b-4ce7-93d2-371bdbda4052"],
Cell[53065, 1453, 205, 3, 30, "Input",ExpressionUUID->"7957ef50-803a-4366-a246-7142f8fe129f"],
Cell[CellGroupData[{
Cell[53295, 1460, 257, 4, 30, "Input",ExpressionUUID->"8ec8f7d2-e89b-4278-9367-f70f7eee6ecb"],
Cell[53555, 1466, 173, 2, 34, "Output",ExpressionUUID->"37c61b1e-c7eb-444f-b770-018e6378ad63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53765, 1473, 205, 3, 30, "Input",ExpressionUUID->"900b5a24-3e0f-4f26-a7ba-5c8df9d86582"],
Cell[53973, 1478, 232, 4, 34, "Output",ExpressionUUID->"c2ae853e-6fcb-4774-b73b-395d56327bb4"]
}, Open  ]],
Cell[54220, 1485, 148, 3, 32, "Item",ExpressionUUID->"a56e542d-4957-4962-ac33-e48ead1676e2"],
Cell[54371, 1490, 259, 6, 30, "Input",ExpressionUUID->"ecc0a39e-8375-4fd1-bd17-65a1d4bceec9"],
Cell[CellGroupData[{
Cell[54655, 1500, 302, 6, 30, "Input",ExpressionUUID->"69b677cc-8f43-4006-84cb-1711a94ca5d7"],
Cell[54960, 1508, 308, 7, 45, "Output",ExpressionUUID->"59aabac9-5a86-4575-be6e-5ab9244404b3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[55329, 1522, 160, 3, 67, "Section",ExpressionUUID->"381b4b4d-50bd-4761-b1db-c6fd1851f725"],
Cell[CellGroupData[{
Cell[55514, 1529, 213, 4, 54, "Subsection",ExpressionUUID->"8b4575cf-d13e-4a13-aa38-3e1b15ad7f28"],
Cell[CellGroupData[{
Cell[55752, 1537, 227, 5, 32, "Item",ExpressionUUID->"beb51433-6ca7-4953-bb31-f0cca3fc7f0c"],
Cell[55982, 1544, 199, 3, 32, "Item",ExpressionUUID->"fd5c4c4a-9218-4985-bf85-75ea3a1e5135"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56218, 1552, 385, 9, 30, "Input",ExpressionUUID->"db12f43e-1c62-4bcd-b1f9-ea7a761e0fc8"],
Cell[56606, 1563, 10834, 197, 231, "Output",ExpressionUUID->"d3964437-bf50-46a2-8edf-6076f2ac72f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67477, 1765, 475, 9, 30, "Input",ExpressionUUID->"cfc63e24-9c1b-4754-8753-15e71566776a"],
Cell[67955, 1776, 5111, 89, 136, "Output",ExpressionUUID->"d83795ed-c8aa-471b-a000-d9767fe30beb"]
}, Open  ]],
Cell[73081, 1868, 222, 5, 32, "Item",ExpressionUUID->"a5b1a828-e961-4f7f-b9d6-2ab34fa2e196"],
Cell[CellGroupData[{
Cell[73328, 1877, 386, 8, 30, "Input",ExpressionUUID->"4d694fc0-fe9b-403a-b79d-f81f7771f939"],
Cell[73717, 1887, 213, 4, 34, "Output",ExpressionUUID->"c05bb60a-b952-4758-b75b-6101fd02a2b8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73991, 1898, 160, 3, 67, "Section",ExpressionUUID->"cd83a227-e9be-4e15-83f1-991ee6e65131"],
Cell[CellGroupData[{
Cell[74176, 1905, 165, 3, 54, "Subsection",ExpressionUUID->"e4d0e18f-d064-48fe-84ee-1d42a0042627"],
Cell[CellGroupData[{
Cell[74366, 1912, 189, 3, 32, "Item",ExpressionUUID->"c4137973-144d-461b-b783-fb021a0e9b1a"],
Cell[74558, 1917, 237, 4, 32, "Item",ExpressionUUID->"4ea8e412-3429-4efa-b28f-ec209542b5ac"],
Cell[CellGroupData[{
Cell[74820, 1925, 184, 3, 27, "Subitem",ExpressionUUID->"09cf0f84-427a-4b75-8775-9b64aa218182"],
Cell[75007, 1930, 187, 3, 27, "Subitem",ExpressionUUID->"beb3e77d-c179-40d1-b48d-c4982fda35dd"],
Cell[75197, 1935, 249, 4, 27, "Subitem",ExpressionUUID->"565efa82-9590-4f5c-8a7c-c3e0ec0dc85d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75495, 1945, 171, 3, 45, "Subsubsection",ExpressionUUID->"867ea4a3-0a5a-4b84-8664-fddf6791dc72"],
Cell[CellGroupData[{
Cell[75691, 1952, 185, 3, 32, "Item",ExpressionUUID->"f98d923c-d0b3-46db-b2cc-79d1f70743c5"],
Cell[75879, 1957, 162, 3, 32, "Item",ExpressionUUID->"6fd85165-168f-4df2-afa2-4facf8e36ff3"],
Cell[76044, 1962, 171, 3, 32, "Item",ExpressionUUID->"0a0a3245-c059-427e-962f-d7fc807085b7"],
Cell[CellGroupData[{
Cell[76240, 1969, 155, 3, 27, "Subitem",ExpressionUUID->"44964bcc-fb26-40e5-a69f-68a130f7a491"],
Cell[76398, 1974, 152, 3, 27, "Subitem",ExpressionUUID->"4a0dd159-9912-4376-9b6b-53812e3214b2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[76611, 1984, 174, 3, 45, "Subsubsection",ExpressionUUID->"b91f282e-057f-415c-9edc-5fd3ca43b528"],
Cell[CellGroupData[{
Cell[76810, 1991, 157, 3, 32, "Item",ExpressionUUID->"4ae06d95-aaf7-440e-a1f0-77f9dd03aee2"],
Cell[76970, 1996, 154, 3, 32, "Item",ExpressionUUID->"4359e22d-7f72-4038-907d-174612deb6c7"],
Cell[77127, 2001, 169, 3, 32, "Item",ExpressionUUID->"ac812249-a010-404d-9d3f-12e987203485"],
Cell[CellGroupData[{
Cell[77321, 2008, 202, 3, 27, "Subitem",ExpressionUUID->"d53236bf-6b51-4f6c-a612-f69ab740d777"],
Cell[77526, 2013, 182, 3, 27, "Subitem",ExpressionUUID->"a3e0dc79-b069-495d-81b6-33d5b81bb163"],
Cell[77711, 2018, 163, 3, 27, "Subitem",ExpressionUUID->"d60b6a60-8376-4f0c-98bf-978ec7d8c7c2"],
Cell[77877, 2023, 162, 3, 27, "Subitem",ExpressionUUID->"69f8d8fc-658b-42f1-8cf2-be2ba923e7a0"],
Cell[78042, 2028, 161, 3, 27, "Subitem",ExpressionUUID->"d8441e1b-8ba4-490e-8592-7b5e7a433065"],
Cell[78206, 2033, 216, 4, 27, "Subitem",ExpressionUUID->"7e982a8d-f874-4bb9-b4d2-9dde0814fb15"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[78483, 2044, 224, 4, 45, "Subsubsection",ExpressionUUID->"61753f23-84f9-48af-b31d-927f1851de1b"],
Cell[CellGroupData[{
Cell[78732, 2052, 183, 3, 32, "Item",ExpressionUUID->"5a158cd2-6a49-4d7e-b151-87018939c375"],
Cell[78918, 2057, 162, 3, 32, "Item",ExpressionUUID->"3e6f8a7d-0b39-40e2-996a-85fc2894454c"],
Cell[79083, 2062, 169, 3, 32, "Item",ExpressionUUID->"c00c25c5-e3db-4dd0-9de1-714ec39ec315"],
Cell[79255, 2067, 216, 4, 27, "Subitem",ExpressionUUID->"7e893a5f-04cb-482b-910a-304d97840dc6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[79520, 2077, 238, 4, 45, "Subsubsection",ExpressionUUID->"2ee4dbcc-439d-421d-a29b-a3172066fde6"],
Cell[CellGroupData[{
Cell[79783, 2085, 151, 3, 32, "Item",ExpressionUUID->"986adca4-1c55-407e-b7f9-8377e7d52d96"],
Cell[CellGroupData[{
Cell[79959, 2092, 163, 3, 27, "Subitem",ExpressionUUID->"ef16478a-d1d8-47eb-b588-b4b82401efcd"],
Cell[80125, 2097, 174, 3, 27, "Subitem",ExpressionUUID->"e1b951ba-1690-4da9-9807-8a8b8868aac8"],
Cell[80302, 2102, 182, 3, 27, "Subitem",ExpressionUUID->"322ecb65-4314-4ef7-849b-35fc0dada4b1"]
}, Open  ]],
Cell[80499, 2108, 155, 3, 32, "Item",ExpressionUUID->"119fdc0a-fbfa-4a7f-9acc-ca6bbd57d96e"],
Cell[80657, 2113, 152, 3, 32, "Item",ExpressionUUID->"d7b1715e-ca7c-4f8a-ad84-130ae3359afd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[80858, 2122, 177, 3, 45, "Subsubsection",ExpressionUUID->"94d5a5d1-f3ef-42ee-ad7d-7579b99c532b"],
Cell[CellGroupData[{
Cell[81060, 2129, 157, 3, 32, "Item",ExpressionUUID->"d4658ad8-1b8c-4b1c-a05f-18012a85ee0d"],
Cell[81220, 2134, 158, 3, 32, "Item",ExpressionUUID->"872db917-a521-4989-a292-8dcaa3df2ccb"],
Cell[81381, 2139, 160, 3, 32, "Item",ExpressionUUID->"441eece3-bd82-486d-8dda-b1fe90e8f038"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81614, 2150, 161, 3, 67, "Section",ExpressionUUID->"258cb655-40dd-4c14-9c7c-7190b01a7a94"],
Cell[CellGroupData[{
Cell[81800, 2157, 287, 6, 53, "Item",ExpressionUUID->"cde23619-4029-4bd7-9366-6b45c64dc943"],
Cell[CellGroupData[{
Cell[82112, 2167, 277, 6, 45, "Subitem",ExpressionUUID->"c245ffd7-6f19-4a08-a682-15c4dd3c54ea"],
Cell[82392, 2175, 144, 3, 27, "Subitem",ExpressionUUID->"74ffcb41-8b35-4544-8098-25c01f1e4b8d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82585, 2184, 186, 3, 54, "Subsection",ExpressionUUID->"c913c276-0f6e-4481-957e-9f0574470f90"],
Cell[82774, 2189, 185, 3, 32, "Item",ExpressionUUID->"58bc6880-25ce-4e97-bc94-b55fcfed6d4a"],
Cell[82962, 2194, 190, 3, 38, "CodeText",ExpressionUUID->"2851592a-ff52-42e3-8520-a83f0221abc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83189, 2202, 181, 3, 54, "Subsection",ExpressionUUID->"fdaa4906-20d1-4792-af5c-7499cb8dc80c"],
Cell[83373, 2207, 162, 3, 32, "Item",ExpressionUUID->"94b80db3-be96-4d0b-b4e3-f243f78705cc"],
Cell[CellGroupData[{
Cell[83560, 2214, 313, 8, 30, "Input",ExpressionUUID->"4fff566e-5f61-4584-8085-6f336b696475"],
Cell[83876, 2224, 481028, 8733, 75, "Output",ExpressionUUID->"2c8ce1f7-8ded-43e3-8f50-4b3b14e83ef8"]
}, Open  ]],
Cell[564919, 10960, 123436, 2030, 61, "Input",ExpressionUUID->"0f057e57-3a08-4fb8-857f-5635e15cde04"],
Cell[CellGroupData[{
Cell[688380, 12994, 208, 4, 30, "Input",ExpressionUUID->"35537f1d-8957-44cc-a83c-dbf6103cae9d"],
Cell[688591, 13000, 358, 7, 43, "Output",ExpressionUUID->"c368dcec-7cf3-4b38-b2e9-fbef689ce2cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[688986, 13012, 156, 3, 32, "Item",ExpressionUUID->"9ee5de3c-d91a-4195-8b5f-dca7a01615b0"],
Cell[CellGroupData[{
Cell[689167, 13019, 241, 6, 27, "Subitem",ExpressionUUID->"e3016110-af26-4659-ba6e-49818b62e3b6"],
Cell[CellGroupData[{
Cell[689433, 13029, 222, 4, 25, "Subsubitem",ExpressionUUID->"7da13b89-45d2-4c30-aef7-06a30a8daeb7"],
Cell[689658, 13035, 242, 4, 25, "Subsubitem",ExpressionUUID->"861eeae4-3e77-4346-ada1-8366e5cf42fa"]
}, Open  ]]
}, Open  ]],
Cell[689927, 13043, 153, 3, 32, "Item",ExpressionUUID->"0f7c18db-b07f-49b4-a169-62692c03e8a3"],
Cell[CellGroupData[{
Cell[690105, 13050, 301, 7, 27, "Subitem",ExpressionUUID->"7f408efc-3d1d-403f-a850-7816ceb3ba45"],
Cell[690409, 13059, 161, 3, 27, "Subitem",ExpressionUUID->"f9ce10ce-97e0-432f-b835-6356115b4bf7"]
}, Open  ]],
Cell[690585, 13065, 152, 3, 32, "Item",ExpressionUUID->"ee98d4b3-8e75-43d4-90c5-717bb4dbc0fa"],
Cell[CellGroupData[{
Cell[690762, 13072, 222, 4, 27, "Subitem",ExpressionUUID->"89df84d0-adef-4e30-8c15-48e3035a0987"],
Cell[690987, 13078, 206, 4, 27, "Subitem",ExpressionUUID->"3037131c-49f2-4e9f-bfa5-436c52fe39f8"],
Cell[691196, 13084, 223, 4, 27, "Subitem",ExpressionUUID->"d588368d-e867-40d4-8eca-8b7797e3eb0f"],
Cell[691422, 13090, 217, 4, 27, "Subitem",ExpressionUUID->"6f2e21e2-e006-4c27-a058-a0847c140096"]
}, Open  ]],
Cell[691654, 13097, 270, 4, 32, "Item",ExpressionUUID->"0203a2c2-605f-4e7b-a644-5a81d4d6b866"],
Cell[691927, 13103, 266, 4, 32, "Item",ExpressionUUID->"a0a2ca53-0a55-4f1f-8a6e-b9562fb6e300"],
Cell[692196, 13109, 269, 4, 32, "Item",ExpressionUUID->"457c1cf8-a3d1-4462-b3a5-871d9097a168"],
Cell[692468, 13115, 156, 3, 32, "Item",ExpressionUUID->"daff58cf-797f-40ae-92fc-40c73d99b85c"],
Cell[692627, 13120, 380, 7, 64, "Subitem",ExpressionUUID->"e53b2b70-4f33-4586-a7d1-3cd973b0dc95"],
Cell[693010, 13129, 169, 3, 32, "Item",ExpressionUUID->"b4fb7b3e-cc47-4447-8fc5-197c48c870a1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[693216, 13137, 400, 10, 30, "Input",ExpressionUUID->"4975e568-a173-4e72-9344-6b00acbca5b6"],
Cell[693619, 13149, 5627, 120, 64, "Output",ExpressionUUID->"6fc73657-b740-4081-bcd8-ade0bb33112f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[699283, 13274, 176, 3, 32, "Item",ExpressionUUID->"682499c1-c3ec-4606-ae1a-de5e514a0b51"],
Cell[699462, 13279, 160, 3, 32, "Item",ExpressionUUID->"fc02e29b-d990-43bc-8b11-de56cb50678b"],
Cell[699625, 13284, 219, 4, 27, "Subitem",ExpressionUUID->"ee3f1287-37cd-4114-9fe6-cfe6d16e0fcb"],
Cell[699847, 13290, 207, 4, 32, "Item",ExpressionUUID->"6f7eeeae-4978-4b81-8bb8-f8ef778023c0"]
}, Open  ]]
}, Open  ]],
Cell[700081, 13298, 155, 3, 54, "Subsection",ExpressionUUID->"cf1673b0-6477-41c4-b72e-0b691c6fc9f4"]
}, Open  ]]
}
]
*)

